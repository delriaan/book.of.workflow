[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chionesu George. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"George C (2023). book..workflow: Book Workflow. R package version 1.2.0.","code":"@Manual{,   title = {book.of.workflow: Book of Workflow},   author = {Chionesu George},   year = {2023},   note = {R package version 1.2.0}, }"},{"path":"/index.html","id":"book-of-workflow","dir":"","previous_headings":"","what":"Book of Workflow","title":"Book of Workflow","text":"following functional families covered ‘book..workflow’:","code":""},{"path":"/index.html","id":"chapter-1-environment-processing","dir":"","previous_headings":"","what":"Chapter 1: Environment-processing","title":"Book of Workflow","text":"focus loading libraries managing environment objects: load_unloaded save_image copy_obj","code":""},{"path":"/index.html","id":"chapter-2-environment-integrity","dir":"","previous_headings":"","what":"Chapter 2: Environment Integrity","title":"Book of Workflow","text":"family functions focused maintaining integrity object environments, primarily, mitigate errors due missing object dependencies: %missing% %must.%, %+must.% %check% %+=% %-=%","code":""},{"path":"/index.html","id":"chapter-3-external-data-management","dir":"","previous_headings":"","what":"Chapter 3: External Data Management","title":"Book of Workflow","text":"family functions primarily focuses connecting external data (primarily databases): make_query get_data export_data check.db_conn","code":""},{"path":"/index.html","id":"chapter-4-workflow-management","dir":"","previous_headings":"","what":"Chapter 4: Workflow Management","title":"Book of Workflow","text":"family functions focuses code execution workflow: read.snippet make.snippet snippets_toc mgr_upgrade","code":"snippets_toc"},{"path":"/reference/Book-of-Workflow-Package.html","id":null,"dir":"Reference","previous_headings":"","what":"Book of Workflow — Book of Workflow Package","title":"Book of Workflow — Book of Workflow Package","text":"following functional families covered `book..workflow`:","code":""},{"path":"/reference/Book-of-Workflow-Package.html","id":"chapter-environment-processing","dir":"Reference","previous_headings":"","what":"Chapter 1 - Environment-processing","title":"Book of Workflow — Book of Workflow Package","text":"focus loading libraries managing environment objects: .load_unloaded .save_image .copy_obj","code":""},{"path":"/reference/Book-of-Workflow-Package.html","id":"chapter-environment-integrity","dir":"Reference","previous_headings":"","what":"Chapter 2 - Environment Integrity","title":"Book of Workflow — Book of Workflow Package","text":"family functions focused maintaining integrity object environments, primarily, mitigate errors due  missing object dependencies: %missing% %must.% %check% %+must.% %+=% %-=%","code":""},{"path":"/reference/Book-of-Workflow-Package.html","id":"chapter-external-data-management","dir":"Reference","previous_headings":"","what":"Chapter 3 - External Data Management","title":"Book of Workflow — Book of Workflow Package","text":"family functions focuses connecting external data (primarily databases) well parallelized computing contexts special consideration Windows environments without SSH implemented: make_query get_data export_data check.db_conn","code":""},{"path":"/reference/Book-of-Workflow-Package.html","id":"chapter-workflow-management","dir":"Reference","previous_headings":"","what":"Chapter 4 - Workflow Management","title":"Book of Workflow — Book of Workflow Package","text":"family functions focuses code execution workflow: read.snippet make.snippet snippets_toc mgr_upgrade","code":""},{"path":"/reference/book.of.workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Book of Workflow Overview — book.of.workflow","title":"Book of Workflow Overview — book.of.workflow","text":"following functional families covered `book..workflow`:","code":""},{"path":"/reference/book.of.workflow.html","id":"chapter-environment-processing","dir":"Reference","previous_headings":"","what":"Chapter 1 - Environment-processing","title":"Book of Workflow Overview — book.of.workflow","text":"focus loading libraries managing environment objects: load_unloaded save_image copy_obj","code":""},{"path":"/reference/book.of.workflow.html","id":"chapter-environment-integrity","dir":"Reference","previous_headings":"","what":"Chapter 2 - Environment Integrity","title":"Book of Workflow Overview — book.of.workflow","text":"family functions focused maintaining integrity object environments, primarily, mitigate errors due  missing object dependencies: %missing% %must.% %check% %+must.% %+=% %-=%","code":""},{"path":"/reference/book.of.workflow.html","id":"chapter-external-data-management","dir":"Reference","previous_headings":"","what":"Chapter 3 - External Data Management","title":"Book of Workflow Overview — book.of.workflow","text":"family functions focuses connecting external data (primarily databases) well parallelized computing contexts special consideration Windows environments without SSH implemented: make_query get_data export_data check.db_conn","code":""},{"path":"/reference/book.of.workflow.html","id":"chapter-workflow-management","dir":"Reference","previous_headings":"","what":"Chapter 4 - Workflow Management","title":"Book of Workflow Overview — book.of.workflow","text":"family functions focuses code execution workflow: read.snippet make.snippet snippets_toc mgr_upgrade","code":""},{"path":"/reference/check.db_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a Database Connection (OBSOLETE) — check.db_conn","title":"Check a Database Connection (OBSOLETE) — check.db_conn","text":"check.db_conn Validates DBI connection reconnects invalid using connection's stored settings.","code":""},{"path":"/reference/check.db_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a Database Connection (OBSOLETE) — check.db_conn","text":"","code":"check.db_conn(this.conn, pass, ...)"},{"path":"/reference/check.db_conn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a Database Connection (OBSOLETE) — check.db_conn","text":".conn DBI-package connection object pass password use required: raw input converted character ... used","code":""},{"path":"/reference/check.db_conn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a Database Connection (OBSOLETE) — check.db_conn","text":"active DBI connection object","code":""},{"path":[]},{"path":"/reference/copy_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace, [C]opy, or [M]ove objects — copy_obj","title":"Replace, [C]opy, or [M]ove objects — copy_obj","text":"copy_obj Facilitates renaming, copying, moving objects within across environments. .env NULL, execution simply replace object new name. .env multiple values, copy move operations populate environment.","code":""},{"path":"/reference/copy_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace, [C]opy, or [M]ove objects — copy_obj","text":"","code":"copy_obj(   ...,   from.env = .GlobalEnv,   to.env,   keep.orig = TRUE,   chatty = FALSE,   .debug = FALSE )"},{"path":"/reference/copy_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace, [C]opy, or [M]ove objects — copy_obj","text":"... (dots_list) String(s) giving names object(s) moved: may include environment prefix (e.g., FROM_ENV$.name).  Elements given key-value pair names keys become destination object names; otherwise, value (parsed ) used destination name.  example, ... = list(= , , TO_ENV$the_other = ) results three destination objects named , , the_other the_other created environment TO_ENV. .env (string| .GlobalEnv): default source environment object(s) moved/copied .env (string| .GlobalEnv): default target environment target object keep.orig (logical | TRUE): FALSE, original removed via rm chatty (logical | FALSE): Verbosity flag","code":""},{"path":"/reference/do.copy_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace, [C]opy, or [M]ove objects — do.copy_obj","title":"Replace, [C]opy, or [M]ove objects — do.copy_obj","text":".copy_obj Facilitates renaming, copying, moving objects within across environments. .env NULL, execution simply replace object new name. .env multiple values, copy move operations populate environment.","code":""},{"path":"/reference/do.copy_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace, [C]opy, or [M]ove objects — do.copy_obj","text":"","code":"do.copy_obj(   ...,   from.env = .GlobalEnv,   to.env,   keep.orig = TRUE,   chatty = FALSE,   .debug = FALSE )"},{"path":"/reference/do.copy_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace, [C]opy, or [M]ove objects — do.copy_obj","text":"... (dots_list) String(s) giving names object(s) moved: may include environment prefix (e.g., FROM_ENV$.name).  Elements given key-value pair names keys become destination object names; otherwise, value (parsed ) used destination name.  example, ... = list(= , , TO_ENV$the_other = ) results three destination objects named , , the_other the_other created environment TO_ENV. .env (string| .GlobalEnv): default source environment object(s) moved/copied .env (string| .GlobalEnv): default target environment target object keep.orig (logical | TRUE): FALSE, original removed via rm chatty (logical | FALSE): Verbosity flag","code":""},{"path":"/reference/do.export_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Tabular Data From R to DBMS — do.export_data","title":"Export Tabular Data From R to DBMS — do.export_data","text":".export_data serves wrapper dbWriteTable. using append=FALSE, operation destructive target table dropped exists, use function caution. parameter `post.cmd` provided","code":""},{"path":"/reference/do.export_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Tabular Data From R to DBMS — do.export_data","text":"","code":"do.export_data(   out.data,   this.conn,   tbl = NULL,   sch = \"dbo\",   post.cmd = NULL,   append = FALSE,   persist.conn = TRUE,   ... )"},{"path":"/reference/do.export_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Tabular Data From R to DBMS — do.export_data","text":".data data write database, preferably data.frame coercible .conn DBI-package connection object tbl (string) name table drop (exists) create sch (string) name schema create table post.cmd (string) provided, post-table creation call sqlQuery() executed `post.cmd` query string: use subsequent operations indexing, execution additional stored procedures, etc. append (logical)    data appended existing data rather replacing existing data? persist.conn (logical | TRUE) FALSE, connection closed end execution ... Additional arguments passed dbWriteTable","code":""},{"path":[]},{"path":"/reference/do.get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve SQL Data and Post-process — do.get_data","title":"Retrieve SQL Data and Post-process — do.get_data","text":"workflow function retrieve dataset source, post-process according value argument post.op, , tgt.name NULL, assign object named according value tgt.name","code":""},{"path":"/reference/do.get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve SQL Data and Post-process — do.get_data","text":"","code":"do.get_data(   this.conn,   src.name = NULL,   tgt.name = NULL,   this.data = NULL,   post.op = eval,   verbose = FALSE,   promise = FALSE,   persist.conn = TRUE,   ... )"},{"path":"/reference/do.get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve SQL Data and Post-process — do.get_data","text":".conn DBI-package connection object src.name (string) Data source name tgt.name (string | NULL) NULL, name R workspace object use assigning output. Use format obj_name@env_name specify target environment assign object .data (expression) NULL, R object post-operation post.op (object) function list functions process retrieved dataset (argument #1) assigning workspace verbose (logical | FALSE) TRUE, interim output printed console promise (logical | FALSE) TRUE, assignment done via call futureAssign persist.conn (logical | TRUE) FALSE, connection closed end execution ... Arguments used function .make_query","code":""},{"path":"/reference/do.get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve SQL Data and Post-process — do.get_data","text":"Invisibly, retrieved, post-processed dataset","code":""},{"path":[]},{"path":"/reference/do.get_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Install and load packages — do.get_pkgs","title":"Install and load packages — do.get_pkgs","text":"`.get_pkgs()` longer use","code":""},{"path":"/reference/do.get_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install and load packages — do.get_pkgs","text":"","code":"do.get_pkgs()"},{"path":[]},{"path":"/reference/do.load_unloaded.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Unloaded Packages — do.load_unloaded","title":"Load Unloaded Packages — do.load_unloaded","text":".load_unloadedchecks packages provided libs call search makes call library unloaded (attached) libraries.","code":""},{"path":"/reference/do.load_unloaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Unloaded Packages — do.load_unloaded","text":"","code":"do.load_unloaded(   ...,   libs = NULL,   pattern = \"[,|; ]\",   autoinstall = FALSE,   chatty = FALSE )"},{"path":"/reference/do.load_unloaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Unloaded Packages — do.load_unloaded","text":"... dots_list vector packages load given characters.  Delimited strings allowed: use + -. libs (string[]) vector packages load given characters symbols.  Delimited strings allowed: use + -. pattern (string | \"[, ]\") regex delimiter pattern operates `str`: use + -. chatty (logical | FALSE) Sets quietly argument call library() autoinstall: FALSE (default): notification message provided chatty TRUE; otherwise, message sent TRUE: library installed, using default library installation path list(): Assumes TRUE list arguments (excluding pkgs) send install.packages","code":""},{"path":"/reference/do.load_unloaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Unloaded Packages — do.load_unloaded","text":"See `library()`","code":""},{"path":"/reference/do.load_unloaded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Unloaded Packages — do.load_unloaded","text":"Library names can declared single, delimited string (e.g., \"name0 name1, name2|name3\") vector strings (e.g. c(\"name0\", \"name1\", \"name2\")). Inclusions exclusions can declared using following template:\"library_name{+name0+name1+...}\" inclusions \"library_name{-name0-name1-...}\".  Since inclusions exclusions used call library(), trying function result error.","code":""},{"path":[]},{"path":"/reference/do.make_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"A Wrapper for makeClusterPSOCK — do.make_cluster","title":"A Wrapper for makeClusterPSOCK — do.make_cluster","text":"`.make_cluster()` longer use","code":""},{"path":"/reference/do.make_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Wrapper for makeClusterPSOCK — do.make_cluster","text":"","code":"do.make_cluster(...)"},{"path":[]},{"path":"/reference/do.make_query.html","id":null,"dir":"Reference","previous_headings":"","what":"T-SQL Query Maker — do.make_query","title":"T-SQL Query Maker — do.make_query","text":".make_query creates valid T-SQL query string.  column selection, following valid: \"*\" default, denoting column names vector column names (e.g., \"col1, col2, col3\") TRUE: invokes tk_select.list interactive selection string , parsed, becomes single-argument mapper use keep (e.g., \"~.x %ilike% \\\"(pat|bp)\\\"\") single-argument function serving mapper keep","code":""},{"path":"/reference/do.make_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"T-SQL Query Maker — do.make_query","text":"","code":"do.make_query(   this.conn,   from,   from.mod = \"\",   where = \"1=1 \",   sel = \"*\",   sel.mod = \"\",   grp.by = NULL,   having = NULL,   ord.by = NULL,   ... )"},{"path":"/reference/do.make_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"T-SQL Query Maker — do.make_query","text":".conn DBI-package connection object (string) object segment fully-qualified object name .mod (string) Table table hints (e.g., (NOLOCK)) hard-coded subsequent JOINs (string) \"\" criteria sel (string|logical | \"*\") columns select (see 'Details') sel.mod (string | \"\") Modifiers 'SELECT' statement (e.g., DISTINCT, TOP n, etc ...) grp.(string) \"GROUP \" criteria (string) \"\" criteria ord.(string) \"ORDER \" criteria","code":""},{"path":"/reference/do.make_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"T-SQL Query Maker — do.make_query","text":"(hopefully) valid T-SQL string","code":""},{"path":[]},{"path":"/reference/do.make_workers.html","id":null,"dir":"Reference","previous_headings":"","what":"Garbage Collection and Parallelization Management — do.make_workers","title":"Garbage Collection and Parallelization Management — do.make_workers","text":".make_workers() simple manager setting freeing futures external clusters.  fairly restricted level flexibility, make management parallelized resources easier execute.","code":""},{"path":"/reference/do.make_workers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Garbage Collection and Parallelization Management — do.make_workers","text":"","code":"do.make_workers(workers = 5, refresh = TRUE, with_cluster = NULL, ...)"},{"path":"/reference/do.make_workers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Garbage Collection and Parallelization Management — do.make_workers","text":"workers (integer) number multisession workers spawn call future::plan().  Valid values 1 10. refresh (logical) TRUE, parallelization workers cleared redefined according values passed argument workers with_cluster (string) object name holding secondary cluster object (e.g., cluster created makeCluster) ... (used)","code":""},{"path":[]},{"path":"/reference/do.save_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual Export of Workspace Objects — do.save_image","title":"Manual Export of Workspace Objects — do.save_image","text":"default value exports entire workspace.  Unless `file` NULL, vector names delimited string names, file name becomes 'multiObs'; otherwise, file name set value . contains '' '*', regardless full content , entire workspace exported.","code":""},{"path":"/reference/do.save_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual Export of Workspace Objects — do.save_image","text":"","code":"do.save_image(   ...,   safe = TRUE,   env = .GlobalEnv,   save.dir = getwd(),   file.name = \"\",   use.prefix = TRUE,   prepare = NULL )"},{"path":"/reference/do.save_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual Export of Workspace Objects — do.save_image","text":"... (vector list) Names objects save given strings symbols. Strings may delimited (c(',', ';', '|', ' ')) safe (logical | TRUE) pending action confirmed prompt? env environment search items save.dir (string | getwd()) directory save (file name).  Use TRUE interactively choose save directory. file.name (string | \"\") name file save, , NULL, value atomic predefined name vector use.prefix (logical | TRUE) TRUE (default), file name prefixed value env prepare (language | NULL) quoted expression executes save action takes place.","code":""},{"path":"/reference/do.save_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual Export of Workspace Objects — do.save_image","text":"`.rdata` file, filename suffixed timestamp formatted \"yyyy.mm.dd.hhmmss\"","code":""},{"path":[]},{"path":"/reference/env.check.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment Integrity Check — env.check","title":"Environment Integrity Check — env.check","text":"env.check related operator %check% checks environment required objects","code":""},{"path":"/reference/env.check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment Integrity Check — env.check","text":"","code":"env.check(env, x)"},{"path":"/reference/env.check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environment Integrity Check — env.check","text":"env (object|string) environment name environment x (string[]) names objects env must ","code":""},{"path":"/reference/env.check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environment Integrity Check — env.check","text":"objects env  must.present, nothing returned; otherwise, error message returned.","code":""},{"path":[]},{"path":"/reference/env_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment Shorthand — env_add","title":"Assignment Shorthand — env_add","text":"env_add related operator %+=% wrappers base::list2env()","code":""},{"path":"/reference/env_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment Shorthand — env_add","text":"","code":"env_add(env, x)"},{"path":"/reference/env_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assignment Shorthand — env_add","text":"env (environment, string) environment name environment x (list) named list names serving object name add env values object definitions/contents object.","code":""},{"path":"/reference/env_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assignment Shorthand — env_add","text":"target environment, invisibly","code":""},{"path":[]},{"path":"/reference/env_subtract.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Objects from an Environment — env_subtract","title":"Remove Objects from an Environment — env_subtract","text":"env_subtract related operator %-=% wrappers base::rm()","code":""},{"path":"/reference/env_subtract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Objects from an Environment — env_subtract","text":"","code":"env_subtract(env, x)"},{"path":"/reference/env_subtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Objects from an Environment — env_subtract","text":"env (environment, string) environment name environment x (string[]) collection strings representing names objects remove env","code":""},{"path":"/reference/env_subtract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Objects from an Environment — env_subtract","text":"target environment, invisibly","code":""},{"path":[]},{"path":"/reference/export_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Tabular Data From R to DBMS — export_data","title":"Export Tabular Data From R to DBMS — export_data","text":"export_data serves wrapper dbWriteTable dbAppendTable. using append=FALSE, operation destructive target table dropped exists, use function caution.","code":""},{"path":"/reference/export_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Tabular Data From R to DBMS — export_data","text":"","code":"export_data(   this.conn,   out.data,   tbl = NULL,   sch = \"dbo\",   append = FALSE,   persist.conn = TRUE,   ... )"},{"path":"/reference/export_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export Tabular Data From R to DBMS — export_data","text":".conn DBI-package connection object .data data write database, preferably data.frame coercible tbl (string) name table drop (exists) create sch (string) name schema create table append (logical)    data appended existing data rather replacing existing data? persist.conn (logical | TRUE) FALSE, connection closed end execution ... Additional arguments passed dbWriteTable","code":""},{"path":[]},{"path":"/reference/get.cluster_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Cluster Metadata — get.cluster_meta","title":"Retrieve Cluster Metadata — get.cluster_meta","text":"get.cluster_meta reads information saved object created one makeCluster family functions","code":""},{"path":"/reference/get.cluster_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Cluster Metadata — get.cluster_meta","text":"","code":"get.cluster_meta(cl)"},{"path":"/reference/get.cluster_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Cluster Metadata — get.cluster_meta","text":"cl cluster object","code":""},{"path":"/reference/get.cluster_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Cluster Metadata — get.cluster_meta","text":"Invisibly, environment active-binding cluster_meta","code":""},{"path":"/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve T-SQL Data — get_data","title":"Retrieve T-SQL Data — get_data","text":"workflow function retrieve data SQL Server, post-process according value argument post.op, , tgt.name NULL, assign object named according value tgt.name","code":""},{"path":"/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve T-SQL Data — get_data","text":"","code":"get_data(   this.conn,   src.name = NULL,   tgt.name = NULL,   this.data = NULL,   post.op = eval,   chatty = FALSE,   promise = FALSE,   persist.conn = TRUE,   ... )"},{"path":"/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve T-SQL Data — get_data","text":".conn DBI-package connection object src.name (string) Data source name tgt.name (string | NULL) NULL, name R workspace object use assigning output. Use format obj_name@env_name specify target environment assign object .data (expression) NULL, R object post-operation post.op (object) function list functions process retrieved dataset (argument #2) assigning workspace chatty (logical | FALSE) Verbosity flag promise (logical | FALSE) TRUE, assignment done via call futureAssign persist.conn (logical | TRUE) FALSE, connection closed end execution ... Arguments used function make_query","code":""},{"path":"/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve T-SQL Data — get_data","text":"Invisibly, retrieved, post-processed dataset","code":""},{"path":[]},{"path":"/reference/grapes-check-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment Integrity Check — %check%","title":"Environment Integrity Check — %check%","text":"%check% checks environment required objects","code":""},{"path":"/reference/grapes-check-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment Integrity Check — %check%","text":"","code":"env %check% x"},{"path":"/reference/grapes-check-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Environment Integrity Check — %check%","text":"env (object | string) environment name environment x (string[]) names objects env must ","code":""},{"path":"/reference/grapes-check-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environment Integrity Check — %check%","text":"objects env  %must.% present, nothing returned; otherwise, error message returned.","code":""},{"path":[]},{"path":"/reference/grapes-equals-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Objects from an Environment — %-=%","title":"Remove Objects from an Environment — %-=%","text":"%-=% wraps base::rm()","code":""},{"path":"/reference/grapes-equals-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Objects from an Environment — %-=%","text":"","code":"env %-=% x"},{"path":"/reference/grapes-equals-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Objects from an Environment — %-=%","text":"env (environment, string) environment name environment x (string[]) collection strings representing names objects remove env","code":""},{"path":"/reference/grapes-equals-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Objects from an Environment — %-=%","text":"target environment, invisibly","code":""},{"path":[]},{"path":"/reference/grapes-missing-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Environmental Objects — %missing%","title":"Missing Environmental Objects — %missing%","text":"%missing% wrapper base::exists taking environment environment name LHS argument vector object names RHS.","code":""},{"path":"/reference/grapes-missing-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Environmental Objects — %missing%","text":"","code":"env %missing% x"},{"path":"/reference/grapes-missing-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Environmental Objects — %missing%","text":"env (object) environment name environment x (string[]) string vector names objects query env","code":""},{"path":"/reference/grapes-missing-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing Environmental Objects — %missing%","text":"logical vector, length x","code":""},{"path":[]},{"path":"/reference/grapes-must.have-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Must Have — %must.have%","title":"Must Have — %must.have%","text":"%must.% sets attribute environment given env name(s) object(s) environment must .  Verification done via %check%.","code":""},{"path":"/reference/grapes-must.have-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Must Have — %must.have%","text":"","code":"env %must.have% x"},{"path":"/reference/grapes-must.have-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Must Have — %must.have%","text":"env (object) environment name environment x (string[]) string vector names env must checked","code":""},{"path":"/reference/grapes-must.have-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Must Have — %must.have%","text":"names objects env must ","code":""},{"path":[]},{"path":"/reference/grapes-plus-equals-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment Shorthand — %+=%","title":"Assignment Shorthand — %+=%","text":"%+=% wraps base::list2env()","code":""},{"path":"/reference/grapes-plus-equals-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment Shorthand — %+=%","text":"","code":"env %+=% x"},{"path":"/reference/grapes-plus-equals-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assignment Shorthand — %+=%","text":"env (environment, string) environment name environment x (list) named list names serving object name add env values object definitions/contents object.","code":""},{"path":"/reference/grapes-plus-equals-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assignment Shorthand — %+=%","text":"target environment, invisibly","code":""},{"path":[]},{"path":"/reference/grapes-plus-must.have-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Must Have in Addition — %+must.have%","title":"Must Have in Addition — %+must.have%","text":"%\\+must.% adds additional object names \"must haves\" given environment","code":""},{"path":"/reference/grapes-plus-must.have-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Must Have in Addition — %+must.have%","text":"","code":"env %+must.have% x"},{"path":"/reference/grapes-plus-must.have-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Must Have in Addition — %+must.have%","text":"env (object) environment name environment x (string[]) string vector names env must checked","code":""},{"path":"/reference/grapes-plus-must.have-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Must Have in Addition — %+must.have%","text":"names objects env must addition existing required objects, invisibly","code":""},{"path":[]},{"path":"/reference/load_unloaded.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Unloaded Packages — load_unloaded","title":"Load Unloaded Packages — load_unloaded","text":"load_unloadedchecks packages provided libs call search makes call library unloaded (attached) libraries.","code":""},{"path":"/reference/load_unloaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Unloaded Packages — load_unloaded","text":"","code":"load_unloaded(   ...,   libs = NULL,   pattern = \"[,|; ]\",   autoinstall = FALSE,   chatty = FALSE )"},{"path":"/reference/load_unloaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Unloaded Packages — load_unloaded","text":"... dots_list vector packages load given characters.  Delimited strings allowed: use + -. libs (string[]) vector packages load given characters symbols.  Delimited strings allowed: use + -. pattern (string | \"[, ]\") regex delimiter pattern operates `str`: use + -. chatty (logical | FALSE) Sets quietly argument call library() autoinstall: FALSE (default): notification message provided chatty TRUE; otherwise, message sent TRUE: library installed, using default library installation path list(): Assumes TRUE list arguments (excluding pkgs) send install.packages","code":""},{"path":"/reference/load_unloaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Unloaded Packages — load_unloaded","text":"See `library()`","code":""},{"path":"/reference/load_unloaded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Unloaded Packages — load_unloaded","text":"Library names can declared single, delimited string (e.g., \"name0 name1, name2|name3\") vector strings (e.g. c(\"name0\", \"name1\", \"name2\")). Inclusions exclusions can declared using following template:\"library_name{+name0+name1+...}\" inclusions \"library_name{-name0-name1-...}\".  Since inclusions exclusions used call library(), trying function result error.","code":""},{"path":[]},{"path":"/reference/make.snippet.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a Snippet — make.snippet","title":"Make a Snippet — make.snippet","text":"new line, make.snippet creates \"tag\"-like comments referenced read.snippet (e.g., <snippet: label>...<\/snippet>).  parsing used, important statements end semi-colon (;) case many programming languages.  opening \"tag\" created code section.","code":""},{"path":"/reference/make.snippet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a Snippet — make.snippet","text":"","code":"make.snippet(..., include.read = TRUE, use.clipboard = FALSE)"},{"path":"/reference/make.snippet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a Snippet — make.snippet","text":"... (dots_list) Symbols words serving keywords , taken together, distinguish snippet others source document include.read (logical) TRUE, associated read.snippet command provided argument eval = parse use.clipboard (logical) TRUE, snippet contents saved clipboard `.Last.value`","code":""},{"path":"/reference/make.snippet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a Snippet — make.snippet","text":"use.clipboard FALSE, pair \"tag\"-like comments code supplied; otherwise, contents saved clipboard (Windows OS )","code":""},{"path":[]},{"path":"/reference/make_query.html","id":null,"dir":"Reference","previous_headings":"","what":"SQL Query Maker — make_query","title":"SQL Query Maker — make_query","text":"make_query helper function create SQL query string focus T-SQL.  column selection, following valid: \"*\" default, denoting column names vector column names (e.g., \"col1, col2, col3\") TRUE: invokes tk_select.list interactive selection string , parsed, becomes single-argument mapper use keep (e.g., \"~.x %ilike% \\\"(pat|bp)\\\"\") single-argument function serving mapper keep","code":""},{"path":"/reference/make_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SQL Query Maker — make_query","text":"","code":"make_query(   this.conn,   from,   from.mod = \"\",   where = \"1=1 \",   sel = \"*\",   sel.mod = \"\",   group_by = NULL,   having = NULL,   order_by = NULL,   ... )"},{"path":"/reference/make_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SQL Query Maker — make_query","text":".conn DBI-package connection object (string) object segment fully-qualified object name .mod (string) Table table hints (e.g., (NOLOCK)) hard-coded subsequent JOINs (string) \"\" criteria sel (string|logical | \"*\") columns select (see 'Details') sel.mod (string | \"\") Modifiers 'SELECT' statement (e.g., DISTINCT, TOP n, etc ...) group_by (string) \"GROUP \" criteria (string) \"\" criteria order_by (string) \"ORDER \" criteria ... (used)","code":""},{"path":"/reference/make_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SQL Query Maker — make_query","text":"(T-)SQL string use RDBMS call","code":""},{"path":[]},{"path":"/reference/mgr_upgrade.html","id":null,"dir":"Reference","previous_headings":"","what":"Upgrade a workflow Manager — mgr_upgrade","title":"Upgrade a workflow Manager — mgr_upgrade","text":"mgr_upgrade copies predefined class field 'workflows' new class instance latest (internally-tracked) version.  contents returned object original call defined ref","code":""},{"path":"/reference/mgr_upgrade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upgrade a workflow Manager — mgr_upgrade","text":"","code":"mgr_upgrade(ref)"},{"path":"/reference/mgr_upgrade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upgrade a workflow Manager — mgr_upgrade","text":"ref unquoted call 'workflow_manager' object","code":""},{"path":"/reference/mgr_upgrade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upgrade a workflow Manager — mgr_upgrade","text":"Possibly console messages, nothing else.","code":""},{"path":"/reference/must.have.html","id":null,"dir":"Reference","previous_headings":"","what":"Must Have — must.have","title":"Must Have — must.have","text":"must.related operator %must.% sets attribute environment given env name(s) object(s) environment must .  Verification done via env.check.","code":""},{"path":"/reference/must.have.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Must Have — must.have","text":"","code":"must.have(env, x)"},{"path":"/reference/must.have.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Must Have — must.have","text":"env (object) environment name environment x (string[]) string vector names env must checked","code":""},{"path":"/reference/must.have.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Must Have — must.have","text":"names objects env must ","code":""},{"path":[]},{"path":"/reference/must.have2.html","id":null,"dir":"Reference","previous_headings":"","what":"Must Have in Addition — must.have2","title":"Must Have in Addition — must.have2","text":"must.have2 related operator %\\+must.% adds additional object names \"must haves\" given environment","code":""},{"path":"/reference/must.have2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Must Have in Addition — must.have2","text":"","code":"must.have2(env, x)"},{"path":"/reference/must.have2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Must Have in Addition — must.have2","text":"env (object) environment name environment x (string[]) string vector names env must checked","code":""},{"path":"/reference/must.have2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Must Have in Addition — must.have2","text":"names objects env must addition existing required objects, invisibly","code":""},{"path":[]},{"path":"/reference/read.snippet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Snippet from Source Code — read.snippet","title":"Read a Snippet from Source Code — read.snippet","text":"read.snippet returns pre-defined sections (snippets) larger source files marked \"tag\"-like syntax (e.g., <snippet: label>...<\/snippet>) parsing used, important statements end semi-colon (;) case many programming languages.","code":""},{"path":"/reference/read.snippet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Snippet from Source Code — read.snippet","text":"","code":"read.snippet(..., doc, action)"},{"path":"/reference/read.snippet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Snippet from Source Code — read.snippet","text":"... (dots_list) Keywords given strings symbols matching snippet sought doc input source document name given string: defaults active document function invoked argument action One goto, skip, parse, exec, save","code":""},{"path":"/reference/read.snippet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Snippet from Source Code — read.snippet","text":"snippet text invisibly","code":""},{"path":"/reference/read.snippet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a Snippet from Source Code — read.snippet","text":"exception action = goto, document cursor moves closing snippet tag (.e., \"<\/snippet>\") using RStudio.","code":""},{"path":"/reference/read.snippet.html","id":"action","dir":"Reference","previous_headings":"","what":"action","title":"Read a Snippet from Source Code — read.snippet","text":"goto (RStudio-): Editor cursor jumps beginning code region without execution skip (RStudio-): Editor jumps end code region without execution parse: Contents code region run cat without execution exec: Contents code region parse executed global environment save: Contents code region saved current working directory using keywords contained `...` ending '.snippet'","code":""},{"path":[]},{"path":"/reference/save_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual Export of Workspace Objects — save_image","title":"Manual Export of Workspace Objects — save_image","text":"default value exports entire workspace.  Unless `file` NULL, vector names delimited string names, file name becomes 'multiObs'; otherwise, file name set value . contains '' '*', regardless full content , entire workspace exported.","code":""},{"path":"/reference/save_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual Export of Workspace Objects — save_image","text":"","code":"save_image(   ...,   safe = TRUE,   env = .GlobalEnv,   save.dir = getwd(),   file.name = \"\",   use.prefix = TRUE,   use.timestamp = TRUE,   prepare = NULL )"},{"path":"/reference/save_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual Export of Workspace Objects — save_image","text":"... (dots_list) Names objects save given strings symbols. Strings may delimited (c(',', ';', '|', ' ')) safe (logical | TRUE) pending action confirmed prompt? env environment search items save.dir (string | getwd()) directory save (file name).  Use TRUE interactively choose save directory. file.name (string | \"\") name file save, , NULL, value atomic predefined name vector use.prefix (logical | TRUE) TRUE (default), file name prefixed value env use.timestamp (logical | TRUE) TRUE (default), file name appended formatted value Sys.time() prepare (language | NULL) quoted expression executes save action takes place.","code":""},{"path":"/reference/save_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual Export of Workspace Objects — save_image","text":"`.rdata` file, filename suffixed timestamp formatted \"yyyy.mm.dd.hhmmss\"","code":""},{"path":[]},{"path":"/reference/snippets_toc.html","id":null,"dir":"Reference","previous_headings":"","what":"Snippets Table of Contents — snippets_toc","title":"Snippets Table of Contents — snippets_toc","text":"snippets_toc creates table contents snippet code sections.","code":""},{"path":"/reference/snippets_toc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snippets Table of Contents — snippets_toc","text":"","code":"snippets_toc(doc)"},{"path":"/reference/snippets_toc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Snippets Table of Contents — snippets_toc","text":"doc path document containing code sections created via make.snippet()","code":""},{"path":"/reference/snippets_toc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Snippets Table of Contents — snippets_toc","text":"Invisibly, listing snippet code sections document provided","code":""},{"path":"/reference/snippets_toc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Snippets Table of Contents — snippets_toc","text":"active session must required use file doc NULL","code":""},{"path":"/reference/terminate.cluster_workers.html","id":null,"dir":"Reference","previous_headings":"","what":"Terminate Remote Cluster Workers — terminate.cluster_workers","title":"Terminate Remote Cluster Workers — terminate.cluster_workers","text":"`terminate.cluster_workers()` longer use","code":""},{"path":"/reference/terminate.cluster_workers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Terminate Remote Cluster Workers — terminate.cluster_workers","text":"","code":"terminate.cluster_workers(...)"},{"path":[]},{"path":"/reference/workflow_manager.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow Manager — workflow_manager","title":"Workflow Manager — workflow_manager","text":"workflow_manager R6 class helps manage workflow-related tasks.  general idea set sets ordered actions selectively execute -demand.","code":""},{"path":"/reference/workflow_manager.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Workflow Manager — workflow_manager","text":"workflows Holds workflow sets (expression lists) log Holds history executed workflow steps Initialize Workflow  Manager","code":""},{"path":"/reference/workflow_manager.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Workflow Manager — workflow_manager","text":"available Show Available workflow Sets$available R6Class active binding prints objects $workflows, indicating one current workflow (use $help(get) related information) current Show set current workflow","code":""},{"path":[]},{"path":"/reference/workflow_manager.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Workflow Manager — workflow_manager","text":"workflow_manager$new() workflow_manager$manage() workflow_manager$get() workflow_manager$exec() workflow_manager$reset() workflow_manager$clone()","code":""},{"path":"/reference/workflow_manager.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Workflow Manager — workflow_manager","text":"$new initializes new object","code":""},{"path":"/reference/workflow_manager.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Manager — workflow_manager","text":"","code":"workflow_manager$new(...)"},{"path":"/reference/workflow_manager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Manager — workflow_manager","text":"... used","code":""},{"path":"/reference/workflow_manager.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Manager — workflow_manager","text":"Invisibly, class environment Manage Workflow Sets","code":""},{"path":"/reference/workflow_manager.html","id":"method-manage-","dir":"Reference","previous_headings":"","what":"Method manage()","title":"Workflow Manager — workflow_manager","text":"$manage_sets add remove workflow sets $workflows  set ordered, named expression list can manually defined created make.workflow() items can defined according taste, names must passed show action one 'add', 'update', 'remove', 'delete'. addition, element ... must supplied list (e.g., fitted = list(<objects>))","code":""},{"path":"/reference/workflow_manager.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Manager — workflow_manager","text":"","code":"workflow_manager$manage(   action,   wf_name = private$curnt,   ...,   confirm.rm = quote(askYesNo(\"Remove %s?\" %>% sprintf(wf_name))),   chatty = FALSE )"},{"path":"/reference/workflow_manager.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Manager — workflow_manager","text":"action One add, update, remove, delete, copy given strings symbols: add Populate objects new object set stored $workflows update Similar add existing stored object set remove, delete Remove stored object set name copy, clone Copy stored object set new name wf_name One names use saved workflow sets ... term expected set, object data provided named list, element length wf_name confirm.rm (logical) Set FALSE feeling lucky -- punk! chatty (logical \\ FALSE) Verbosity flag","code":""},{"path":"/reference/workflow_manager.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Manager — workflow_manager","text":"Invisibly, class environment Get Saved Set Workflow Objects","code":""},{"path":"/reference/workflow_manager.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Workflow Manager — workflow_manager","text":"$get retrieve object $workflows named wf_name set $current environment name wf_name","code":""},{"path":"/reference/workflow_manager.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Manager — workflow_manager","text":"","code":"workflow_manager$get(wf_name)"},{"path":"/reference/workflow_manager.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Manager — workflow_manager","text":"wf_name string symbol name set get","code":""},{"path":"/reference/workflow_manager.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Manager — workflow_manager","text":"Invisibly, class environment Execute Stored Workflow Step","code":""},{"path":"/reference/workflow_manager.html","id":"method-exec-","dir":"Reference","previous_headings":"","what":"Method exec()","title":"Workflow Manager — workflow_manager","text":"execute.workflow executes quoted expressions referencing read.snippet calls.","code":""},{"path":"/reference/workflow_manager.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Manager — workflow_manager","text":"","code":"workflow_manager$exec(wf, wf_step, list.only = FALSE, passive = TRUE)"},{"path":"/reference/workflow_manager.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Manager — workflow_manager","text":"wf (list) name workflow object containing workflow step expressions wf_step (string/symbol) names steps execute.  Tip: label steps order execute. list.(logical | FALSE) TRUE, available workflows workflow steps printed console function exits. passive (logical | TRUE) FALSE, workflow steps interactively selected","code":""},{"path":"/reference/workflow_manager.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Manager — workflow_manager","text":"list.== TRUE, listing workflows corresponding steps invisibly; otherwise, nothing. Reset Workflow Manager","code":""},{"path":"/reference/workflow_manager.html","id":"method-reset-","dir":"Reference","previous_headings":"","what":"Method reset()","title":"Workflow Manager — workflow_manager","text":"$reset clear '$workflows' set '$current' NULL","code":""},{"path":"/reference/workflow_manager.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Manager — workflow_manager","text":"","code":"workflow_manager$reset(confirm = TRUE)"},{"path":"/reference/workflow_manager.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Manager — workflow_manager","text":"confirm (logical | TRUE) Set FALSE feeling lucky -- punk!","code":""},{"path":"/reference/workflow_manager.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Manager — workflow_manager","text":"Invisibly, class environment","code":""},{"path":"/reference/workflow_manager.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Workflow Manager — workflow_manager","text":"objects class cloneable method.","code":""},{"path":"/reference/workflow_manager.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Manager — workflow_manager","text":"","code":"workflow_manager$clone(deep = FALSE)"},{"path":"/reference/workflow_manager.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Manager — workflow_manager","text":"deep Whether make deep clone.","code":""}]
