% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/4_workflow_management.R
\name{workflow_manager}
\alias{workflow_manager}
\title{Workflow Manager}
\description{
\code{workflow_manager} is an R6 class that helps to manage workflow-related tasks
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{workflows}}{Holds the workflow sets (expression lists)
Initialize the Workflow  Manager

\code{$new} initializes a new object}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{available}}{Show Available workflow Sets\cr\code{$available} is an \code{\link[R6]{R6Class}} active binding that prints the objects in \code{$workflows}, indicating which one is the current workflow (use \code{$help(get) for related information})}

\item{\code{current}}{Show or set the current workflow}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-workflow_manager-new}{\code{workflow_manager$new()}}
\item \href{#method-workflow_manager-manage}{\code{workflow_manager$manage()}}
\item \href{#method-workflow_manager-get}{\code{workflow_manager$get()}}
\item \href{#method-workflow_manager-exec}{\code{workflow_manager$exec()}}
\item \href{#method-workflow_manager-reset}{\code{workflow_manager$reset()}}
\item \href{#method-workflow_manager-clone}{\code{workflow_manager$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-workflow_manager-new"></a>}}
\if{latex}{\out{\hypertarget{method-workflow_manager-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{workflow_manager$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Not used}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly, the class environment
Manage Workflow Sets

\code{$manage_sets} will add or remove workflow sets from \code{$workflows}  A set is an ordered, named expression list which can be manually defined or created with \code{make.workflow()}

Each of the above items can be defined according to taste, but the names must be passed as show above when \code{action} is one of 'add', 'update', 'remove', 'delete'.
In addition, each element of \code{...} \emph{must} be supplied as a list (e.g., \code{fitted = list(<objects>)})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-workflow_manager-manage"></a>}}
\if{latex}{\out{\hypertarget{method-workflow_manager-manage}{}}}
\subsection{Method \code{manage()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{workflow_manager$manage(
  action,
  wf_name = private$curnt,
  ...,
  confirm.rm = quote(askYesNo("Remove \%s?" \%>\% sprintf(wf_name))),
  chatty = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{action}}{One of \code{add}, \code{update}, \code{remove}, \code{delete}, or \code{copy} given as strings or symbols (see section 'Action')}

\item{\code{wf_name}}{One or more names to use for saved workflow sets}

\item{\code{...}}{For each term expected in a set, the object data provided in a named list, each element being the same length as \code{wf_name}}

\item{\code{confirm.rm}}{(logical) Set to \code{FALSE} if you're feeling lucky -- punk!}

\item{\code{chatty}}{(logical \ FALSE) Verbosity flag

Argument \code{action}:\cr
\describe{
\item{add}{Populate objects into a \emph{new} object set stored in \code{$workflows}}
\item{update}{Similar to \code{add} but to an existing stored object set }
\item{remove, delete}{Remove a stored object set by name}
\item{copy, clone}{Copy a stored object set under a new name}
}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly, the class environment
Get a Saved Set of Workflow Objects

\code{$get} will retrieve the object in \code{$workflows} named in \code{wf_name} out and set \code{$current} to the environment with the name of that in \code{wf_name}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-workflow_manager-get"></a>}}
\if{latex}{\out{\hypertarget{method-workflow_manager-get}{}}}
\subsection{Method \code{get()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{workflow_manager$get(wf_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wf_name}}{A string or symbol of the name of the set to get}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly, the class environment
Execute a Stored Workflow Step

\code{execute.workflow} executes quoted expressions referencing \code{read.snippet} calls.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-workflow_manager-exec"></a>}}
\if{latex}{\out{\hypertarget{method-workflow_manager-exec}{}}}
\subsection{Method \code{exec()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{workflow_manager$exec(wf, wf_step, list.only = FALSE, passive = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wf}}{(list) The name of the workflow object containing the workflow step expressions}

\item{\code{wf_step}}{(string/symbol) The names of the steps to execute.  Tip: label the steps in the order they should execute.}

\item{\code{list.only}}{(logical | FALSE) When \code{TRUE}, available workflows and workflow steps are printed to console before the function exits.}

\item{\code{passive}}{(logical | TRUE) When \code{FALSE}, workflow steps are interactively selected}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
When \code{list.only == TRUE}, the listing of workflows and corresponding steps invisibly; otherwise, nothing.
Reset the Workflow Manager

\code{$reset} will clear out '$workflows' and set '$current' to \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-workflow_manager-reset"></a>}}
\if{latex}{\out{\hypertarget{method-workflow_manager-reset}{}}}
\subsection{Method \code{reset()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{workflow_manager$reset(confirm = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{confirm}}{(logical | TRUE) Set to \code{FALSE} if you're feeling lucky -- punk!}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly, the class environment
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-workflow_manager-clone"></a>}}
\if{latex}{\out{\hypertarget{method-workflow_manager-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{workflow_manager$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
