% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1_environment_processing.R
\name{copy_obj}
\alias{copy_obj}
\title{Replace, Copy, or Move Objects}
\usage{
copy_obj(
  ...,
  from_env = .GlobalEnv,
  to_env = .GlobalEnv,
  keep.orig = TRUE,
  chatty = FALSE
)
}
\arguments{
\item{...}{(\code{\link[rlang]{dots_list}}) String(s) giving the names of the object(s) to be moved: may include environment prefix (e.g., \code{FROM_ENV$from.name}).  Elements given as a key-value pair will have the names of keys become the destination object names; otherwise, the value is (parsed and ) used as the destination name.  For example, \code{... = list(a = this, that, TO_ENV$the_other = other)} results in three destination objects named \code{a}, \code{that}, and \code{the_other} with \code{the_other} created in environment \code{TO_ENV}.}

\item{from_env}{(string| \code{.GlobalEnv}): The default source environment of the object(s) to be moved/copied}

\item{to_env}{(string| \code{.GlobalEnv}): The default target environment of the target object}

\item{keep.orig}{(logical | \code{TRUE}): When \code{FALSE}, the original is removed via \code{\link[base]{rm}}}

\item{chatty}{(logical | \code{FALSE}) Verbosity flag}
}
\description{
\code{copy.obj} Facilitates the renaming, copying, and moving of objects within and across environments.
If \code{to.env} is \code{NULL}, the execution will simply replace the object under a new name.
If \code{to.env} has multiple values, the copy or move operations will populate each environment.
}
\seealso{
Other Chapter 1 - Environment Processing: 
\code{\link{load_unloaded}()},
\code{\link{save_image}()}
}
\concept{Chapter 1 - Environment Processing}
