, "#"
, "#' @description"
, glue::glue("#' The following functional chapters are covered in \\code{{{pkg_name}}}:\\cr")
, sep = "\n"
)}
#
toc_header <- { paste(
glue::glue("# ![book](book_small.png) {pkg_title}\n\n")
, glue::glue("The following functional families are covered in {pkg_name}:")
, sep = "\n"
)}
#
pkg_doc_footer <- { paste(
"#'"
, "#' @importFrom magrittr %>% %T>% %<>% %$% freduce not"
, "#' @importFrom data.table %between% %ilike% %like% rbindlist last setattr"
, "#' @importFrom stringi %s+%"
, "#' @importFrom utils askYesNo installed.packages"
, glue::glue("#' @name {pkg_name}")
, "NULL"
, sep = "\n"
)}
#
# Output ----
unlink(pkg_file)
unlink(toc_file)
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
pkg_doc_header
pkg_doc_content
pkg_file
toc_header
toc_content
toc_file
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
#
# Build Site ----
# usethis::use_pkgdown()
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
library(book.of.workflow)
source("C:/Users/sapie/GitHub/book.of.workflow/table_of_contents.R", echo=TRUE)
# Read the source directory and name the paths of source files as titles
# The titles will show up in package documentation
pkg_desc <- desc::desc(file = "pkg/DESCRIPTION")
pkg_name <- pkg_desc$get_field("Package")
pkg_title <- pkg_desc$get_field("Title")
pkg_file <- "pkg/R/book.of.utilities.R"
toc_file <- "pkg/README.md"
#
# Generation ----
pkg_doc_prep <- dir("pkg/R", pattern = "R$", recursive = TRUE, full.names = TRUE) |>
(\(x){
i <- which(grepl("miscell|other", x));
if (rlang::is_empty(i)){ x } else { c(x[-i], x[i]) }
})() |>
purrr::discard(\(x) grepl(pkg_name, x)) |>
purrr::map(\(x){
list(path = x, title = { stringi::stri_replace_all_regex(x, c("pkg/R/", "[.]R$", "[_]"), c("", "", " "), vectorise_all = FALSE) |>
stringi::stri_trans_totitle() })
})
#
pkg_template <- c("#' \\itemize{", "%s", "#' }") |> paste(collapse = "\n")
pkg_doc_content <- c()
toc_content <- c()
# Populate content
pkg_doc_prep |> purrr::iwalk(\(x, y){
env <- new.env();
source(x$path, local = env)
pkg_doc_content <<- pkg_doc_content |>
c(paste(
glue::glue("#' @section Chapter {y} - {x$title}: ")
, sprintf("#' \\item{\\code{\\link{%s}}}", ls(env)) |>
stringi::stri_replace_all_fixed("%", "\\%", vectorise_all = TRUE) |>
paste(collapse = "\n") |>
sprintf(fmt = pkg_template)
, sep = "\n"
)) |> unique()
toc_content <<- toc_content |>
c(paste(
glue::glue("## Chapter {y} - {x$title}\n\n")
, sprintf("- %s", ls(env)) |> paste(collapse = "\n")
, sep = "\n"
)) |> unique()
})
#
pkg_doc_header <- { paste(
glue::glue("#' @title {pkg_title}")
, "#"
, "#' @description"
, "#' `book.of.utilities` seeks to facilitate execution of those repetitive, ad-hoc tasks often encountered during data processing."
, "#'"
, glue::glue("#' The following functional chapters are covered in \\code{{{pkg_name}}}:\\cr")
, sep = "\n"
)}
#
toc_header <- { paste(
glue::glue("# ![book](book_small.png) {pkg_title}\n\n")
, glue::glue("*`{pkg_name}`* seeks to facilitate execution of those repetitive, ad-hoc tasks often encountered during data processing.")
, glue::glue("The following functional families are covered in `{pkg_name}`:")
, sep = "\n"
)}
pkg_doc_header
toc_content
pkg_file <- "pkg/R/book.of.workflow.R"
pkg_file <- glue::glue("pkg/R/{pkg_name}.R")
pkg_file
#
# Output ----
unlink(pkg_file)
unlink(toc_file)
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
pkg_doc_footer <- { paste(
"#'"
, "#' @importFrom magrittr %>% %T>% %<>% %$% freduce not"
, "#' @importFrom data.table %between% %ilike% %like% rbindlist last setattr"
, "#' @importFrom stringi %s+%"
, "#' @importFrom utils askYesNo installed.packages"
, glue::glue("#' @name {pkg_name}")
, "NULL"
, sep = "\n"
)}
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
#
# Build Site ----
# usethis::use_pkgdown()
dir("../resources/R", pattern = "list", full.names = TRUE) |> source();
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n");
#
# Build Site ----
# usethis::use_pkgdown()
library(magrittr)
dir("../resources/R", pattern = "list", full.names = TRUE) |> source();
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n");
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n");
dep_text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
);
dep_text
knitr::knit(
input = dep_text
, output = "pkg/depends.html"
, envir = globalenv()
);
knitr::knit(
text = dep_text
, output = "pkg/depends.html"
, envir = globalenv()
);
dep_text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
dep_text
knitr::knit(
text = dep_text
, output = "pkg/depends.html"
, envir = globalenv()
);
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "pkg/README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
);
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "pkg/README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
);
unlink("pkg/README_cache", recursive = TRUE)
dep_text
cat(dep_text, file = "pkg/depends.html", append = FALSE)
pkg_desc
pkg_desc$get_field("Description")
glue::glue("#' {pkg_desc$get_field(\"Description\")}")
#
pkg_doc_header <- { paste(
glue::glue("#' @title {pkg_title}")
, "#"
, "#' @description"
, glue::glue("#' {pkg_desc$get_field(\"Description\")}")
, "#'"
, glue::glue("#' The following functional chapters are covered in \\code{{{pkg_name}}}:\\cr")
, sep = "\n"
)}
#
# Output ----
unlink(pkg_file)
unlink(toc_file)
cat(pkg_doc_header, pkg_doc_content, pkg_doc_footer, sep = "\n#'\n", file = pkg_file)
cat(toc_header, toc_content, sep = "\n\n", file = toc_file, append = FALSE)
dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character() |>
cat(file = "pkg/toc.html", sep = "\n");
dep_text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
cat(dep_text, file = "pkg/depends.html", append = FALSE)
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "pkg/README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
);
getwd()
dep_text <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
cat(dep_text, file = "pkg/depends.html", append = FALSE)
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "pkg/README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
);
getwd()
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
);
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
rstudioapi::navigateToFile("pkg/README.md");
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
htmltools::includeHTML("pkg/toc.html")
htmltools::tagList(
htmltools::includeHTML("pkg/toc.html")
, htmltools::includeHTML("pkg/depends.html")
)
pkgdown::build_site(pkg = "pkg", lazy = TRUE, override = list(destination = "../docs"))
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
);
# Manually replace `%&gt;&lt;%` with `%><%`
rstudioapi::navigateToFile("pkg/README.md");
toc_html <- dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character()
dep_html <- htmltools::tagList(
htmltools::tags$h2("Dependencies")
, desc::desc(package = pkg_name)$get_deps() |>
knitr::kable(format = "html") |>
htmltools::HTML()
) |>
as.character()
toc_html <- dir("pkg/R", pattern = "^[a-z].+R$") %>%
rlang::set_names(
stringi::stri_split_fixed(., "_") |>
sapply(\(i) stringi::stri_trans_totitle(i) |> paste(collapse = " ")) |>
stringi::stri_replace_all_fixed(c(".r", "Z "), "", vectorize_all = FALSE) |>
sprintf(fmt = "Chapter %2$s - %1$s", seq_along(.))
) |>
purrr::map(\(i){
readLines(paste0("pkg/R/", i)) |>
stringi::stri_extract_all_regex(pattern = "(^[[:punct:]a-z_`%].+ (?=(<-)))", omit_no_match = TRUE) |>
sapply(\(k){
stringi::stri_split_fixed(k, "@family ", simplify = TRUE, omit_empty = TRUE) |> as.vector()
}) |>
purrr::compact() |>
unlist() |>
trimws() |>
sort() %>%
slider::slide(
.after = 2
, .step = 3
, .f = \(k) sapply(k, \(i) htmltools::HTML(i) |> as.character())
, .complete = length(.) > 2
) |>
purrr::compact() %>%
rlang::set_names(rep.int("", length(.)))
}) |>
list2html(.ordered = FALSE) |>
as.character()
toc_html
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
, envir = globalenv()
);
pkgdown::build_site(
pkg = "pkg"
, lazy = TRUE
, override = list(destination = "../docs")
)
toc_html
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "README.md"
, output_format = "markdown"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
, envir = globalenv()
, clean = TRUE
, run_pandoc = TRUE
);
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "README.md"
, output_format = "Markdown"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
, envir = globalenv()
, clean = TRUE
, run_pandoc = TRUE
);
rmarkdown::render(
input = "pkg/README.rmd"
, output_file = "README.md"
, knit_root_dir = getwd()
, intermediates_dir = getwd()
, envir = globalenv()
, clean = TRUE
, run_pandoc = TRUE
);
knitr::knit(
input = "pkg/README.rmd"
, output_file = "README.md"
# , knit_root_dir = getwd()
# , intermediates_dir = getwd()
, envir = globalenv()
# , clean = TRUE
# , run_pandoc = TRUE
);
knitr::knit(
input = "pkg/README.rmd"
, output = "README.md"
# , knit_root_dir = getwd()
# , intermediates_dir = getwd()
, envir = globalenv()
# , clean = TRUE
# , run_pandoc = TRUE
);
pkgdown::build_site(
pkg = "pkg"
, lazy = TRUE
, override = list(destination = "../docs")
)
unlink("pkg/README_cache", recursive = TRUE)
readtext::readtext("README.md")
readtext::readtext("README.md")$text
readtext::readtext("README.md")$text |>
htmltools::HTML() |>
htmltools::html_print()
knitr::knit(input = "pkg/README.rmd", output = "README.md", envir = globalenv());
readtext::readtext("README.md")$text |>
htmltools::HTML() |>
htmltools::html_print()
readtext::readtext("README.md")$text
knitr::knit(input = "pkg/README.rmd", output = "pkg/README.md", envir = globalenv());
pkgdown::build_site(
pkg = "pkg"
, lazy = TRUE
, override = list(destination = "../docs")
)
book.of.workflow::make.snippet(build, site)
