check.env(BLEH)
}
, test_5 = {
BLEH %must.have% !!c("E", "F", "G")
`%must.have%`(BLEH)
copy_obj(E, `F`, G, to_env = BLEH, keep.orig = TRUE);
check.env(BLEH)
}
, test_6 = {
BLEH %must.have% !!c("A", "B", "C", "D", "E", "F", "G")
`%must.have%`(BLAH)
`%must.have%`(BLEH)
copy_obj(A, B, C, D, E, `F`, G, to_env = c(BLEH, BLAH), keep.orig = TRUE);
check.env(BLAH, BLEH)
}
) |>
setattr("init", make_test_objs)
);
attr(unit_tests$copy_obj, "init") |> eval()
unit_tests$test_1 |> eval()
#
# ~ copy_obj() ====
unit_tests <- list(
copy_obj = rlang::exprs(
test_1 = {
copy_obj(A, keep.orig = TRUE);
list(`.GlobalEnv` = rlang::env_has(.GlobalEnv, c("A")));
}
, test_2 = {
copy_obj(B, C, D, keep.orig = TRUE);
list(`.GlobalEnv` = rlang::env_has(.GlobalEnv, c("B", "C", "D")));
}
, test_3 = {
copy_obj(B, C, D, to_env = BLAH, keep.orig = TRUE);
list(BLAH = rlang::env_has(env = BLAH, nms = c("B", "C", "D")));
}
, test_4 = {
copy_obj(B, C, D, from_env = BLAH, to_env = BLEH, keep.orig = TRUE);
list(BLEH = rlang::env_has(env = BLEH, nms = c("B", "C", "D")));
}
, test_5 = {
copy_obj(E, `F`, G, to_env = BLEH, keep.orig = TRUE);
list(BLEH = rlang::env_has(BLEH, c("E", "F", "G")))
}
, test_6 = {
copy_obj(A, B, C, D, E, `F`, G, to_env = c(BLEH, BLAH), keep.orig = TRUE);
list(
BLAH = rlang::env_has(BLAH, c("A", "B", "C", "D", "E", "F", "G"))
, BLEH = rlang::env_has(BLEH, c("A", "B", "C", "D", "E", "F", "G"))
)
}
, test_7 = {
copy_obj(!!!(LETTERS[1:7]), to_env = c(BLEH, BLAH), keep.orig = FALSE);
list(
BLAH = rlang::env_has(BLAH, LETTERS[1:7])
, BLEH = rlang::env_has(BLEH, LETTERS[1:7])
, `.GlobalEnv` = rlang::env_has(.GlobalEnv, c("H", "I", "J"))
)
}
, test_8 = {
copy_obj(`BLAH$alpha` = H, `BLAH$beta` = I, `BLEH$gamma` = J, keep.orig = !TRUE);
list(
BLAH = rlang::env_has(BLAH, c("alpha", "beta")) |> print()
, BLEH = rlang::env_has(BLEH, c("gamma")) |> print()
, `.GlobalEnv` = !rlang::env_has(.GlobalEnv, c("H", "I", "J")) |> print()
)
}
) |>
setattr("init", make_test_objs)
);
unit_tests$must_have <- rlang::exprs(
test_1 = {
environment() %must.have% A
`%must.have%`(.GlobalEnv) # NULL
copy_obj(A, keep.orig = TRUE);
check.env(.GlobalEnv)
}
, test_2 = {
.GlobalEnv %must.have% !!c("B", "C", "D", `%must.have%`(.GlobalEnv))
`%must.have%`(.GlobalEnv) 	# NULL
copy_obj(B, C, D, keep.orig = TRUE)
check.env(.GlobalEnv)
}
, test_3 = {
BLAH %must.have% !!c("B", "C", "D")
`%must.have%`(BLAH)
copy_obj(B, C, D, to_env = BLAH, keep.orig = TRUE);
check.env(BLAH)
}
, test_4 = {
BLEH %must.have% !!c("B", "C", "D")
`%must.have%`(BLEH)
copy_obj(B, C, D, from_env = BLAH, to_env = BLEH, keep.orig = TRUE);
check.env(BLEH)
}
, test_5 = {
BLEH %must.have% !!c("E", "F", "G")
`%must.have%`(BLEH)
copy_obj(E, `F`, G, to_env = BLEH, keep.orig = TRUE);
check.env(BLEH)
}
, test_6 = {
BLEH %must.have% !!c("A", "B", "C", "D", "E", "F", "G")
`%must.have%`(BLAH)
`%must.have%`(BLEH)
copy_obj(A, B, C, D, E, `F`, G, to_env = c(BLEH, BLAH), keep.orig = TRUE);
check.env(BLAH, BLEH)
}
) |>
setattr("init", make_test_objs)
attr(unit_tests$copy_obj, "init") |> eval()
unit_tests$must_have$test_1 |> eval()
unit_tests$must_have$test_2 |> eval()
unit_tests$must_have$test_3 |> eval()
unit_tests$must_have$test_4 |> eval()
unit_tests$must_have$test_5 |> eval()
unit_tests$must_have$test_6 |> eval()
?`!!`
View(unit_tests)
# Add to environment
`%+=%`<- function(env, x = ""){
#' Assignment Shorthand
#'
#' \code{\%+=\%} wraps \code{base::list2env()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(list) A named list with the names serving as the object name to add to \code{env} and the values the object definitions/contents for each object.  Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
if (x != ""){ list2env(rlang::list2(x), envir = env) }
invisible(env);
}
# Remote from environment
`%-=%` <- function(env, x = ""){
#' Remove Objects from an Environment
#'
#' \code{\%-=\%} wraps for \code{base::rm()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(string[]) A collection of strings representing the names of the objects to remove from \code{env}. Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
if (x != ""){ rm(list = rlang::enexprs(x) |> sapply(rlang::as_label), envir = env); }
invisible(env);
}
#
# %+=%, %-=% ----
BLAH %+=% !!list(Z = 10)
# Add to environment
`%+=%`<- function(env, x = ""){
#' Assignment Shorthand
#'
#' \code{\%+=\%} wraps \code{base::list2env()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(list) A named list with the names serving as the object name to add to \code{env} and the values the object definitions/contents for each object.  Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- rlang::list2(x);
if (x != ""){ list2env(X, envir = env) }
invisible(env);
}
# Remove from environment
`%-=%` <- function(env, x = ""){
#' Remove Objects from an Environment
#'
#' \code{\%-=\%} wraps for \code{base::rm()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(string[]) A collection of strings representing the names of the objects to remove from \code{env}. Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- rlang::enexprs(x) |> sapply(rlang::as_label)
if (x != ""){ rm(list = x, envir = env); }
invisible(env);
}
#
# %+=%, %-=% ----
BLAH %+=% !!list(Z = 10)
# Add to environment
`%+=%`<- function(env, x = ""){
#' Assignment Shorthand
#'
#' \code{\%+=\%} wraps \code{base::list2env()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(list) A named list with the names serving as the object name to add to \code{env} and the values the object definitions/contents for each object.  Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- rlang::list2(!!x);
if (x != ""){ list2env(X, envir = env) }
invisible(env);
}
#
# %+=%, %-=% ----
BLAH %+=% list(Z = 10)
# Add to environment
`%+=%`<- function(env, x = ""){
#' Assignment Shorthand
#'
#' \code{\%+=\%} wraps \code{base::list2env()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(list) A named list with the names serving as the object name to add to \code{env} and the values the object definitions/contents for each object.  Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- rlang::list2(!!!x);
if (x != ""){ list2env(X, envir = env) }
invisible(env);
}
# Remove from environment
`%-=%` <- function(env, x = ""){
#' Remove Objects from an Environment
#'
#' \code{\%-=\%} wraps for \code{base::rm()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(string[]) A collection of strings representing the names of the objects to remove from \code{env}. Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- rlang::enexprs(x) |> sapply(rlang::as_label)
if (x != ""){ rm(list = x, envir = env); }
invisible(env);
}
#
# %+=%, %-=% ----
BLAH %+=% list(Z = 10)
# Add to environment
`%+=%`<- function(env, x = ""){
#' Assignment Shorthand
#'
#' \code{\%+=\%} wraps \code{base::list2env()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(list) A named list with the names serving as the object name to add to \code{env} and the values the object definitions/contents for each object.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- rlang::list2(!!!x);
if (x != ""){ list2env(x, envir = env) }
invisible(env);
}
#
# %+=%, %-=% ----
BLAH %+=% list(Z = 10)
ls(BLAH)
rlang::env_has(BLAH, "Z")
BLAH %+=% list(W = 30, Y = list(a = 1, b = 3))
list(W = 30, Y = list(a = 1, b = 3))
`%+=%`<- function(env, x = ""){
#' Assignment Shorthand
#'
#' \code{\%+=\%} wraps \code{base::list2env()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(list) A named list with the names serving as the object name to add to \code{env} and the values the object definitions/contents for each object.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- as.list(x);
if (x != ""){ list2env(x, envir = env) }
invisible(env);
}
BLAH %+=% list(W = 30, Y = list(a = 1, b = 3))
debug(`%+=%`)
BLAH %+=% list(W = 30, Y = list(a = 1, b = 3))
# Add to environment
`%+=%`<- function(env, x = ""){
#' Assignment Shorthand
#'
#' \code{\%+=\%} wraps \code{base::list2env()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(list) A named list with the names serving as the object name to add to \code{env} and the values the object definitions/contents for each object.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- as.list(x);
suppressWarnings(if (x != ""){ list2env(x, envir = env) })
invisible(env);
}
# Remove from environment
`%-=%` <- function(env, x = ""){
#' Remove Objects from an Environment
#'
#' \code{\%-=\%} wraps for \code{base::rm()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(string[]) A collection of strings representing the names of the objects to remove from \code{env}. Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
x <- rlang::enexprs(x) |> sapply(rlang::as_label)
suppressWarnings(if (x != ""){ rm(list = x, envir = env); })
invisible(env);
}
BLAH %+=% list(W = 30, Y = list(a = 1, b = 3))
rlang::env_has(BLAH, c("W", "Y"))
BLAH %$% rm(W, Y, Z)
rm(W, Y, Z, envir = BLAH)
BLAH %must.have% !!c("W", "Y", "Z")
`%must.have%`(BLAH)
check.env(BLAH)
# Check if environment has what is should
check.env <- function(...){
#' Environment Integrity Check
#'
#' \code{check.env} checks one or more environments for required objects
#'
#' @param ... One or more environments to check
#'
#' @return If all objects that \code{env} \code{\link{\%must.have\%}} are present, nothing is returned; otherwise, an error message is returned.
#' @family Environmental Integrity
#' @export
envs <- rlang::enquos(..., .named = TRUE) |> purrr::map(check_env_arg);
.test <- rlang::env_has(.x, attr(.x, "must.have"));
purrr::iwalk(envs, ~{
cat(glue::glue("Checking `{.y}`: {ifelse(all({.test}), \"PASS\", \"FAIL: (missing {paste(names(.test[!.test]), collaspe = \", \")})\")}"), sep = "\n")
})
}
check.env(BLAH) # FAIL
# Check if environment has what is should
check.env <- function(...){
#' Environment Integrity Check
#'
#' \code{check.env} checks one or more environments for required objects
#'
#' @param ... One or more environments to check
#'
#' @return If all objects that \code{env} \code{\link{\%must.have\%}} are present, nothing is returned; otherwise, an error message is returned.
#' @family Environmental Integrity
#' @export
envs <- rlang::enquos(..., .named = TRUE) |> purrr::map(check_env_arg);
purrr::iwalk(envs, ~{
.test <- rlang::env_has(.x, attr(.x, "must.have"));
cat(glue::glue("Checking `{.y}`: {ifelse(all({.test}), \"PASS\", \"FAIL: (missing {paste(names(.test[!.test]), collaspe = \", \")})\")}"), sep = "\n")
})
}
check.env(BLAH) # FAIL
# Check if environment has what is should
check.env <- function(...){
#' Environment Integrity Check
#'
#' \code{check.env} checks one or more environments for required objects
#'
#' @param ... One or more environments to check
#'
#' @return If all objects that \code{env} \code{\link{\%must.have\%}} are present, nothing is returned; otherwise, an error message is returned.
#' @family Environmental Integrity
#' @export
envs <- rlang::enquos(..., .named = TRUE) |> purrr::map(check_env_arg);
purrr::iwalk(envs, ~{
.test <- rlang::env_has(.x, attr(.x, "must.have"));
cat(glue::glue("Checking `{.y}`: {ifelse(all(.test), \"PASS\", paste0(\"FAIL: (missing \", paste(names(.test[!.test]), collaspe = \", \"), \")\"))}")
, sep = "\n")
})
}
check.env(BLAH) # FAIL
rlang::env_has(environment(), c("A", "B"))
rlang::env_has(environment(), c("A", "B")) |> names()
# Check if environment has what is should
check.env <- function(...){
#' Environment Integrity Check
#'
#' \code{check.env} checks one or more environments for required objects
#'
#' @param ... One or more environments to check
#'
#' @return If all objects that \code{env} \code{\link{\%must.have\%}} are present, nothing is returned; otherwise, an error message is returned.
#' @family Environmental Integrity
#' @export
envs <- rlang::enquos(..., .named = TRUE) |> purrr::map(check_env_arg);
purrr::iwalk(envs, ~{
.test <- rlang::env_has(.x, attr(.x, "must.have"));
cat(
glue::glue("Checking `{.y}`: {ifelse(all(.test), \"PASS\", paste0(\"FAIL: (missing \", paste(names(.test[!.test]) |> trimws(), collaspe = \", \"), \")\"))}")
, sep = "\n"
)
})
}
check.env(BLAH) # FAIL
# Check if environment has what is should
check.env <- function(...){
#' Environment Integrity Check
#'
#' \code{check.env} checks one or more environments for required objects
#'
#' @param ... One or more environments to check
#'
#' @return If all objects that \code{env} \code{\link{\%must.have\%}} are present, nothing is returned; otherwise, an error message is returned.
#' @family Environmental Integrity
#' @export
envs <- rlang::enquos(..., .named = TRUE) |> purrr::map(check_env_arg);
purrr::iwalk(envs, ~{
.test <- rlang::env_has(.x, attr(.x, "must.have"));
.pass <- "PASS"
.fail <- paste0("FAIL: (missing ", paste(names(.test[!.test]) |> trimws(), collapse = ", "), ")");
cat(glue::glue("Checking `{.y}`: {ifelse(all(.test), .pass, .fail)}"), sep = "\n")
})
}
check.env(BLAH) # FAIL
BLAH %+=% list(W = 30, Y = list(a = 1, b = 3), Z = 10)
check.env(BLAH) # Checking `BLAH`: FAIL: (missing W, Y, Z)
BLAH %-=% !!c("W", "Y")
check.env(BLAH) # Checking `BLAH`: PASS
ls(BLAH)
BLAH %-=% c("W", "Y")
check.env(BLAH) # Checking `BLAH`: PASS
debug(`%-=%`)
BLAH %-=% c("W", "Y")
BLAH %-=% !!c("W", "Y")
BLAH %-=% !!!c("W", "Y")
# Remove from environment
`%-=%` <- function(env, x = ""){
#' Remove Objects from an Environment
#'
#' \code{\%-=\%} wraps for \code{base::rm()}
#'
#' @param env (environment, string) An environment or name of an environment
#' @param x	(string[]) A collection of strings representing the names of the objects to remove from \code{env}. Use the \code{\link[rlang]{`!!`}} operator when passing a vector or list.
#'
#' @return The target environment, invisibly
#'
#' @family Environmental Integrity
#' @export
env <- check_env_arg(env)
suppressWarnings(if (x != ""){ rm(list = x, envir = env); })
invisible(env);
}
BLAH %-=% c("W", "Y")
check.env(BLAH) # Checking `BLAH`: PASS
rlang::env_has(BLAH, c("W", "Y"))
#
# %+=%, %-=% ----
BLAH %+=% list(Z = 10)
rlang::env_has(BLAH, "Z")
BLAH %+=% list(W = 30, Y = list(a = 1, b = 3))
rlang::env_has(BLAH, c("W", "Y"))
rm(W, Y, Z, envir = BLAH)
BLAH %must.have% !!c("W", "Y", "Z")
`%must.have%`(BLAH)
check.env(BLAH) # Checking `BLAH`: FAIL: (missing W, Y, Z)
BLAH %+=% list(W = 30, Y = list(a = 1, b = 3), Z = 10)
check.env(BLAH) # Checking `BLAH`: PASS
debug(`%-=%`)
BLAH %-=% c("W", "Y")
# debug(`%-=%`)
BLAH %-=% c("W", "Y")
undebug(`%-=%`)
# undebug(`%-=%`)
BLAH %-=% c("W", "Y")
check.env(BLAH) # Checking `BLAH`: FAIL: (missing W, Y)
check.env(.GlobalEnv, BLAH, BLEH)
# Check if environment has what is should
check.env <- function(...){
#' Environment Integrity Check
#'
#' \code{check.env} checks one or more environments for required objects
#'
#' @param ... One or more environments to check
#'
#' @return If all objects that \code{env} \code{\link{\%must.have\%}} are present, nothing is returned; otherwise, an error message is returned.
#' @family Environmental Integrity
#' @export
envs <- rlang::enquos(..., .named = TRUE) |> purrr::map(check_env_arg);
purrr::iwalk(envs, ~{
.test <- rlang::env_has(.x, attr(.x, "must.have"));
.pass <- "PASS"
.fail <- paste0("FAIL (missing ", paste(names(.test[!.test]) |> trimws(), collapse = ", "), ")");
cat(glue::glue("Checking `{.y}`: {ifelse(all(.test), .pass, .fail)}"), sep = "\n")
})
}
