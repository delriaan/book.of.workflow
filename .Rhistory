ls(BLAH, pattern = .pattern)
# [1] "B" "C" "D"
do.copy_obj(B, C, D, from.env = BLAH, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
ls(BLEH, pattern = .pattern)
# [1] "B" "C" "D" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(E, `F`, G, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
purrr::map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "B" "C" "D"
#
# $BLEH
# [1] "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(A, B, C, D, E, `F`, G, to.env = c(BLEH, BLAH), keep.orig = TRUE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(!!!LETTERS[1:7], to.env = c(BLEH, BLAH), keep.orig = FALSE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
do.copy_obj(`BLAH$alpha` = H, `BLAH$beta` = I, `BLEH$gamma` = J, keep.orig = TRUE, .debug = !TRUE);
.pattern <- "^[A-Z]$|(alpha|beta|gamma)"
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = paste0(.pattern, "|(^a-z)"), envir = eval(as.symbol(.x))));
# BLAH
# [1] "A" "alpha" "B" "beta" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "gamma" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
# ~ do.save.image():: Only check the prompt to ensure the expected objects and environment return ====
# debug(do.save_image)
do.save_image();
#
do.save_image <- function(..., safe = TRUE, env = .GlobalEnv, save.dir = getwd(), file.name = "", use.prefix = TRUE, prepare = NULL){
#' Manual Export of Workspace Objects
#'
#' The default value for \code{i} exports the entire workspace.  Unless `file` is \code{NULL}, when \code{i} is a vector of names or delimited string of names, the file name becomes 'multiObs'; otherwise, the file name is set to the value of \code{i}. When {i} contains 'all' or '*', regardless of the full content of \code{i}, the entire workspace is exported.
#'
#' @param ... (vector or list) Names of objects to save given as strings or symbols. Strings may be delimited (\code{c(',', ';', '|', ' ')})
#' @param safe	(logical | \code{TRUE}) Should the pending action be confirmed at the prompt?
#' @param env	The environment to search for items
#' @param save.dir (string | \code{getwd()}) The directory to save to (not the file name).  Use \code{TRUE} to interactively choose a save directory.
#' @param file.name	(string | "") The name of the file to save, or, when \code{NULL}, the value of \code{i} if atomic or a predefined name when \code{i} is a vector
#' @param use.prefix (logical | \code{TRUE}) When \code{TRUE} (the default), the file name is prefixed with the value of \code{env}
#' @param prepare	(language | \code{NULL}) A quoted expression that executes before the save action takes place.
#'
#' @return A `.rdata` file, the filename of which being suffixed with a timestamp formatted as "yyyy.mm.dd.hhmmss"
#'
#' @family Environment Processing
#' @export
# :: Preliminary checks on supplied parameters
obj.nms <- NULL;
env_ref <- as.character(rlang::enexpr(env));
if ("character" %in% class(env)){
env <- if (env %in% search()) { env <- as.environment(env) } else { eval(as.symbol(env)) }
}
if (!is.null(prepare)) { eval(prepare, envir = env) }
if (...length() == 0){ obj.nms <- ls(envir = env) }
i =  purrr::map(as.character(rlang::enexprs(...)), ~stringi::stri_split_regex(.x, pattern = "[,;| ]", simplify = TRUE, omit_empty = TRUE)) |> unlist()
if (rlang::is_empty(i)){ i <- "all" }
if (save.dir == TRUE){ save.dir <- tcltk::tk_choose.dir(default = getwd(), caption = "Choose the 'save' directory:") }
filecheck = is.null(file.name) | (stringi::stri_length(trimws(file.name)) == 0)
# :: Environment reference from string
namescheck = { c(
all = { any(i %in% c("*", "all")) }
, single.obj = { (length(i) == 1) & !any(i %in% c("*", "all")) & (stringi::stri_length(i) > 0)}
, multi.as.vector = { (length(i) > 1) & !any(i %in% c("*", "all")) }
, multi.as.string = { any((i %like% "[,;| ]") & !any(i %in% c("*", "all"))) }
) %>%
purrr::keep(~.x) %>% names() %>% .[1]
}
# :: Set the file name based on the values supplied to argument `i`
switch(
namescheck
, "all" 						= { file.name <- ifelse(filecheck, "all", file.name); i <- ls(envir = env, all.names = TRUE) }
, "multi.as.string" = { file.name <- ifelse(filecheck, "multiObs", file.name);
i <- stringi::stri_split_regex(i, "[,;| ]", omit_empty = TRUE, simplify = TRUE) %>% c();
}
, "multi.as.vector" = { file.name <- ifelse(filecheck, "multiObs", file.name) }
, 										{ file.name <- ifelse(filecheck, i, file.name) }
);
# :: Write the binary file to disk
tstamp = format(Sys.time(), "%Y.%m.%d.%H%M%S");
tmp.file = sprintf("%s/%s%s_%s.rdata", save.dir, if (use.prefix){ ifelse(env %like% "Global", "", paste0(env, "$")) } else { "" }, file.name, tstamp);
if (safe) {
msg = { sprintf("Preparing to save %s[%s] to %s: \nContinue? ", env_ref, paste(i, collapse = ", "), tmp.file) }
if (askYesNo(msg, prompt = "Y/N/C")) {
save(list = i, envir = env, file = tmp.file, compress = "bzip2", precheck = safe)
} else { message("Canceling operation ...") }
} else { save(list = i , envir = env, file = tmp.file, compress = "bzip2") }
}
# ~ do.save.image():: Only check the prompt to ensure the expected objects and environment return ====
# debug(do.save_image)
do.save_image();
# ~ do.save.image():: Only check the prompt to ensure the expected objects and environment return ====
# debug(do.save_image)
debug(do.save_image)
do.save_image();
#
do.save_image <- function(..., safe = TRUE, env = .GlobalEnv, save.dir = getwd(), file.name = "", use.prefix = TRUE, prepare = NULL){
#' Manual Export of Workspace Objects
#'
#' The default value for \code{i} exports the entire workspace.  Unless `file` is \code{NULL}, when \code{i} is a vector of names or delimited string of names, the file name becomes 'multiObs'; otherwise, the file name is set to the value of \code{i}. When {i} contains 'all' or '*', regardless of the full content of \code{i}, the entire workspace is exported.
#'
#' @param ... (vector or list) Names of objects to save given as strings or symbols. Strings may be delimited (\code{c(',', ';', '|', ' ')})
#' @param safe	(logical | \code{TRUE}) Should the pending action be confirmed at the prompt?
#' @param env	The environment to search for items
#' @param save.dir (string | \code{getwd()}) The directory to save to (not the file name).  Use \code{TRUE} to interactively choose a save directory.
#' @param file.name	(string | "") The name of the file to save, or, when \code{NULL}, the value of \code{i} if atomic or a predefined name when \code{i} is a vector
#' @param use.prefix (logical | \code{TRUE}) When \code{TRUE} (the default), the file name is prefixed with the value of \code{env}
#' @param prepare	(language | \code{NULL}) A quoted expression that executes before the save action takes place.
#'
#' @return A `.rdata` file, the filename of which being suffixed with a timestamp formatted as "yyyy.mm.dd.hhmmss"
#'
#' @family Environment Processing
#' @export
# :: Preliminary checks on supplied parameters
obj.nms <- NULL;
env_ref <- as.character(rlang::enexpr(env));
if ("character" %in% class(env)){
env <- if (env %in% search()) { env <- as.environment(env) } else { eval(as.symbol(env)) }
}
if (!is.null(prepare)) { eval(prepare, envir = env) }
if (...length() == 0){ obj.nms <- ls(envir = env) }
i =  purrr::map(as.character(rlang::enexprs(...)), ~stringi::stri_split_regex(.x, pattern = "[,;| ]", simplify = TRUE, omit_empty = TRUE)) |> unlist()
if (rlang::is_empty(i)){ i <- "all" }
if (save.dir == TRUE){ save.dir <- tcltk::tk_choose.dir(default = getwd(), caption = "Choose the 'save' directory:") }
filecheck = is.null(file.name) | (stringi::stri_length(trimws(file.name)) == 0)
# :: Environment reference from string
namescheck = { c(
all = { any(i %in% c("*", "all")) }
, single.obj = { (length(i) == 1) & !any(i %in% c("*", "all")) & (stringi::stri_length(i) > 0)}
, multi.as.vector = { (length(i) > 1) & !any(i %in% c("*", "all")) }
, multi.as.string = { any((i %like% "[,;| ]") & !any(i %in% c("*", "all"))) }
) %>%
purrr::keep(~.x) %>% names() %>% .[1]
}
# :: Set the file name based on the values supplied to argument `i`
switch(
namescheck
, "all" 						= { file.name <- ifelse(filecheck, "all", file.name); i <- ls(envir = env, all.names = TRUE) }
, "multi.as.string" = { file.name <- ifelse(filecheck, "multiObs", file.name);
i <- stringi::stri_split_regex(i, "[,;| ]", omit_empty = TRUE, simplify = TRUE) %>% c();
}
, "multi.as.vector" = { file.name <- ifelse(filecheck, "multiObs", file.name) }
, 										{ file.name <- ifelse(filecheck, i, file.name) }
);
# :: Write the binary file to disk
tstamp = format(Sys.time(), "%Y.%m.%d.%H%M%S");
tmp.file = sprintf("%s/%s%s_%s.rdata", save.dir, if (use.prefix){ ifelse(env %like% "Global", "", paste0(env_ref, "$")) } else { "" }, file.name, tstamp);
if (safe) {
msg = { sprintf("Preparing to save %s[%s] to %s: \nContinue? ", env_ref, paste(i, collapse = ", "), tmp.file) }
if (askYesNo(msg, prompt = "Y/N/C")) {
save(list = i, envir = env, file = tmp.file, compress = "bzip2", precheck = safe)
} else { message("Canceling operation ...") }
} else { save(list = i , envir = env, file = tmp.file, compress = "bzip2") }
}
do.save_image();
#
do.save_image <- function(..., safe = TRUE, env = .GlobalEnv, save.dir = getwd(), file.name = "", use.prefix = TRUE, prepare = NULL){
#' Manual Export of Workspace Objects
#'
#' The default value for \code{i} exports the entire workspace.  Unless `file` is \code{NULL}, when \code{i} is a vector of names or delimited string of names, the file name becomes 'multiObs'; otherwise, the file name is set to the value of \code{i}. When {i} contains 'all' or '*', regardless of the full content of \code{i}, the entire workspace is exported.
#'
#' @param ... (vector or list) Names of objects to save given as strings or symbols. Strings may be delimited (\code{c(',', ';', '|', ' ')})
#' @param safe	(logical | \code{TRUE}) Should the pending action be confirmed at the prompt?
#' @param env	The environment to search for items
#' @param save.dir (string | \code{getwd()}) The directory to save to (not the file name).  Use \code{TRUE} to interactively choose a save directory.
#' @param file.name	(string | "") The name of the file to save, or, when \code{NULL}, the value of \code{i} if atomic or a predefined name when \code{i} is a vector
#' @param use.prefix (logical | \code{TRUE}) When \code{TRUE} (the default), the file name is prefixed with the value of \code{env}
#' @param prepare	(language | \code{NULL}) A quoted expression that executes before the save action takes place.
#'
#' @return A `.rdata` file, the filename of which being suffixed with a timestamp formatted as "yyyy.mm.dd.hhmmss"
#'
#' @family Environment Processing
#' @export
# :: Preliminary checks on supplied parameters
obj.nms <- NULL;
env_ref <- as.character(rlang::enexpr(env));
if ("character" %in% class(env)){
env <- if (env %in% search()) { env <- as.environment(env) } else { eval(as.symbol(env)) }
}
if (!is.null(prepare)) { eval(prepare, envir = env) }
if (...length() == 0){ obj.nms <- ls(envir = env) }
i =  purrr::map(as.character(rlang::enexprs(...)), ~stringi::stri_split_regex(.x, pattern = "[,;| ]", simplify = TRUE, omit_empty = TRUE)) |> unlist()
if (rlang::is_empty(i)){ i <- "all" }
if (save.dir == TRUE){ save.dir <- tcltk::tk_choose.dir(default = getwd(), caption = "Choose the 'save' directory:") }
filecheck = is.null(file.name) | (stringi::stri_length(trimws(file.name)) == 0)
# :: Environment reference from string
namescheck = { c(
all = { any(i %in% c("*", "all")) }
, single.obj = { (length(i) == 1) & !any(i %in% c("*", "all")) & (stringi::stri_length(i) > 0)}
, multi.as.vector = { (length(i) > 1) & !any(i %in% c("*", "all")) }
, multi.as.string = { any((i %like% "[,;| ]") & !any(i %in% c("*", "all"))) }
) %>%
purrr::keep(~.x) %>% names() %>% .[1]
}
# :: Set the file name based on the values supplied to argument `i`
switch(
namescheck
, "all" 						= { file.name <- ifelse(filecheck, "all", file.name); i <- ls(envir = env, all.names = TRUE) }
, "multi.as.string" = { file.name <- ifelse(filecheck, "multiObs", file.name);
i <- stringi::stri_split_regex(i, "[,;| ]", omit_empty = TRUE, simplify = TRUE) %>% c();
}
, "multi.as.vector" = { file.name <- ifelse(filecheck, "multiObs", file.name) }
, 										{ file.name <- ifelse(filecheck, i, file.name) }
);
# :: Write the binary file to disk
tstamp = format(Sys.time(), "%Y.%m.%d.%H%M%S");
tmp.file = sprintf("%s/%s%s_%s.rdata", save.dir, if (use.prefix){ ifelse(env_ref %like% "Global", "", paste0(env_ref, "$")) } else { "" }, file.name, tstamp);
if (safe) {
msg = { sprintf("Preparing to save %s[%s] to %s: \nContinue? ", env_ref, paste(i, collapse = ", "), tmp.file) }
if (askYesNo(msg, prompt = "Y/N/C")) {
save(list = i, envir = env, file = tmp.file, compress = "bzip2", precheck = safe)
} else { message("Canceling operation ...") }
} else { save(list = i , envir = env, file = tmp.file, compress = "bzip2") }
}
do.save_image();
do.save_image(!!!ls())
do.save_image(!!!LETTERS[1:6], env = BLEH)
# pkgdown ----
pkgdown::build_site()
library(book.of.workflow)
library(book.of.workflow)
library(book.of.workflow)
sapply(dir("R", full.names = TRUE), source)
library(book.of.workflow)
library(book.of.workflow)
#
# ~ do.copy_obj() ====
BLAH <- new.env()
BLEH <- new.env()
set_names(letters[1:10], LETTERS[1:10]) |> as.list() |> list2env(envir = globalenv())
set_names(letters[11:20], LETTERS[11:20]) |> as.list() |> list2env(envir = BLEH)
.pattern <- "^[A-Z]$"
do.copy_obj(A, keep.orig = TRUE, .debug = !TRUE);
ls(pattern = .pattern)
# [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
do.copy_obj(B, C, D, keep.orig = TRUE, .debug = !TRUE);
ls(pattern = .pattern)
# [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
do.copy_obj(B, C, D, to.env = BLAH, keep.orig = TRUE, .debug = !TRUE);
ls(BLAH, pattern = .pattern)
# [1] "B" "C" "D"
do.copy_obj(B, C, D, from.env = BLAH, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
ls(BLEH, pattern = .pattern)
# [1] "B" "C" "D" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(E, `F`, G, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
purrr::map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "B" "C" "D"
#
# $BLEH
# [1] "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(A, B, C, D, E, `F`, G, to.env = c(BLEH, BLAH), keep.orig = TRUE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(!!!LETTERS[1:7], to.env = c(BLEH, BLAH), keep.orig = FALSE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
do.copy_obj(`BLAH$alpha` = H, `BLAH$beta` = I, `BLEH$gamma` = J, keep.orig = TRUE, .debug = !TRUE);
.pattern <- "^[A-Z]$|(alpha|beta|gamma)"
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = paste0(.pattern, "|(^a-z)"), envir = eval(as.symbol(.x))));
# BLAH
# [1] "A" "alpha" "B" "beta" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "gamma" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
library(purrr);
#
# ~ do.copy_obj() ====
BLAH <- new.env()
BLEH <- new.env()
set_names(letters[1:10], LETTERS[1:10]) |> as.list() |> list2env(envir = globalenv())
set_names(letters[11:20], LETTERS[11:20]) |> as.list() |> list2env(envir = BLEH)
.pattern <- "^[A-Z]$"
do.copy_obj(A, keep.orig = TRUE, .debug = !TRUE);
ls(pattern = .pattern)
# [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
do.copy_obj(B, C, D, keep.orig = TRUE, .debug = !TRUE);
ls(pattern = .pattern)
# [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
do.copy_obj(B, C, D, to.env = BLAH, keep.orig = TRUE, .debug = !TRUE);
ls(BLAH, pattern = .pattern)
# [1] "B" "C" "D"
do.copy_obj(B, C, D, from.env = BLAH, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
ls(BLEH, pattern = .pattern)
# [1] "B" "C" "D" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(E, `F`, G, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
purrr::map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "B" "C" "D"
#
# $BLEH
# [1] "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(A, B, C, D, E, `F`, G, to.env = c(BLEH, BLAH), keep.orig = TRUE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(!!!LETTERS[1:7], to.env = c(BLEH, BLAH), keep.orig = FALSE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
do.copy_obj(`BLAH$alpha` = H, `BLAH$beta` = I, `BLEH$gamma` = J, keep.orig = TRUE, .debug = !TRUE);
.pattern <- "^[A-Z]$|(alpha|beta|gamma)"
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = paste0(.pattern, "|(^a-z)"), envir = eval(as.symbol(.x))));
# BLAH
# [1] "A" "alpha" "B" "beta" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "gamma" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
# ~ do.save.image():: Only check the prompt to ensure the expected objects and environment return ====
# debug(do.save_image)
do.save_image();
do.save_image(!!!LETTERS[1:6], env = BLEH)
# pkgdown ----
pkgdown::build_site()
library(book.of.workflow)
library(book.of.workflow)
library(DBI)
db_conn <- DBI::dbConnect(odbc::odbc(), dsn = "GW2DB_Agent",
uid = keyring::key_list(keyring = "gw2_api", service = "SQLServer")[,
"username"], pwd = keyring::key_get(keyring = "gw2_api",
service = "SQLServer", username = "imperial_agent"))
library(book.of.workflow)
library(book.of.workflow)
rlang::expr_print(this is an expression)
rlang::expr_print(`this is an expression`)
rlang::expr_text(expr = `This is a test`)
rlang::expr_text(expr = rlang::expr(`This is a test`))
rlang::expr_text(expr = rlang::expr(This is a test))
library(book.of.workflow)
library(book.of.workflow)
library(book.of.workflow)
library(book.of.workflow)
use_mit_license()
?use_mit_license
??use_mit_license
usethis::use_proprietary_license()
packageDescription()#usethis::use_proprietary_license()
packageDescription("book.of.workflow")#usethis::use_proprietary_license()
usethis::use_proprietary_license(packageDescription("book.of.workflow")$Author)
library(book.of.workflow)
pkgdown::build_site()
gen_pass <- function(out_length = 24, .chars = c(letters, LETTERS, "!@#$%"), .nums = 1:9){
#' Generate a Password
#' Use \code{gen_pass} to generate a password and automatically save it to the clipboard to paste.
#'
#' @param out_length (integer)
#' @param .chars,.nums Character and numeric vectors to use
#'
#' @return Invisibly, a string of length \code{out_length}
.vec <- paste(
.chars
, sample(.nums, out_length * 2, TRUE)
, rev(.chars)
, sep = ""
) |>
# Now split the strings for sampling and final combination
strsplit("") |>
unlist() |>
unique();
sample(.vec, out_length, TRUE, prob = runif(n = length(.vec), .1, .8)) |>
paste(collapse = "") |>
invisible()
}
gen_pass()
gen_pass() |> print()
gen_pass(out_length = 12) |> print()
gen_pass(out_length = 12) |> print()
gen_pass(out_length = 12) |> print()
gen_pass(out_length = 12) |> print()
(function(object, hash, ...){ identical(digest::digest(object = object, ...), hash) })(object = tcltk::tk_choose.files(), hash = "iQIzBAABCAAdFiEEhZvo18WG9ThDCxnCRnuULTp5vSkFAmOVgKMACgkQRnuULTp5vSnQqhAAm+HNfTjHX4VJJmODfRbcqnrr9e4iR+lqkHyBvqDdXlCvI7n+1TzAMC7dfgQH4XhJMmUZTQrHSURTlI9Ml90jcxt0f0YUFqdlbQ4tdEbUxRt9dVJH9nx81k8VDfOBm7KN+k9PSGTgeF9sp9A+v1cGd0AIBO5/fipKD7MRjGubWSN0B4fgeq1DQu0MPp5I+UV0nfInl1frUI8GjSBHv9Le/2wuJHAGHLvwFKYv8b3iu/aZomZS65wwY5+j1b53bUu3kRVDfwInVKJn2N9tzTDI0ch924WVKhXItwEk9OnayBbj7MpSTfX+iS1fGGDLOqQwHAkha4Z0k8TojMFKx9EQPkoM2Awt/ysWW7eI2NDi72+nIW/ydImMeoVT1eEeElHPK8vVNcRX5ArLeoc3YMq7zzluG/dzbTBX69LkcS/31IdtbEkzIsddRtlJ+pze+mt+xN52oFr3ViFFq8Rhr/HysZBd//aTMVnis7OJO0ggZEQeQT8GqbNWhak6BBDFH8OuWeEdLR16Yn4IrHlLF22z+IFSSwKuTA97+NbchGGSQLjCeCyVFSzWgUPByTPDxYUkNvhAmNiZWsoJHm7hbyDBNJiNfSTPP6x54WIc7wGQajbBQX1RCs6F4uoyT/l3pIkyzI6SHquAnJmWZ9b0U46uFf6mMsYiWUih7lii9RzME0M==auM7", file = TRUE, algo="sha256")
?digest::digest
(function(object, hash, ...){ identical(digest::digest(object = object, ...), hash) })(object = tcltk::tk_choose.files(), hash = "iQIzBAABCAAdFiEEhZvo18WG9ThDCxnCRnuULTp5vSkFAmOVgKMACgkQRnuULTp5vSnQqhAAm+HNfTjHX4VJJmODfRbcqnrr9e4iR+lqkHyBvqDdXlCvI7n+1TzAMC7dfgQH4XhJMmUZTQrHSURTlI9Ml90jcxt0f0YUFqdlbQ4tdEbUxRt9dVJH9nx81k8VDfOBm7KN+k9PSGTgeF9sp9A+v1cGd0AIBO5/fipKD7MRjGubWSN0B4fgeq1DQu0MPp5I+UV0nfInl1frUI8GjSBHv9Le/2wuJHAGHLvwFKYv8b3iu/aZomZS65wwY5+j1b53bUu3kRVDfwInVKJn2N9tzTDI0ch924WVKhXItwEk9OnayBbj7MpSTfX+iS1fGGDLOqQwHAkha4Z0k8TojMFKx9EQPkoM2Awt/ysWW7eI2NDi72+nIW/ydImMeoVT1eEeElHPK8vVNcRX5ArLeoc3YMq7zzluG/dzbTBX69LkcS/31IdtbEkzIsddRtlJ+pze+mt+xN52oFr3ViFFq8Rhr/HysZBd//aTMVnis7OJO0ggZEQeQT8GqbNWhak6BBDFH8OuWeEdLR16Yn4IrHlLF22z+IFSSwKuTA97+NbchGGSQLjCeCyVFSzWgUPByTPDxYUkNvhAmNiZWsoJHm7hbyDBNJiNfSTPP6x54WIc7wGQajbBQX1RCs6F4uoyT/l3pIkyzI6SHquAnJmWZ9b0U46uFf6mMsYiWUih7lii9RzME0M==auM7", file = TRUE, algo="md5")
(function(object, hash, ...){ identical(digest::digest(object = object, ...), hash) })(object = tcltk::tk_choose.files(), hash = charToRaw("iQIzBAABCAAdFiEEhZvo18WG9ThDCxnCRnuULTp5vSkFAmOVgKMACgkQRnuULTp5vSnQqhAAm+HNfTjHX4VJJmODfRbcqnrr9e4iR+lqkHyBvqDdXlCvI7n+1TzAMC7dfgQH4XhJMmUZTQrHSURTlI9Ml90jcxt0f0YUFqdlbQ4tdEbUxRt9dVJH9nx81k8VDfOBm7KN+k9PSGTgeF9sp9A+v1cGd0AIBO5/fipKD7MRjGubWSN0B4fgeq1DQu0MPp5I+UV0nfInl1frUI8GjSBHv9Le/2wuJHAGHLvwFKYv8b3iu/aZomZS65wwY5+j1b53bUu3kRVDfwInVKJn2N9tzTDI0ch924WVKhXItwEk9OnayBbj7MpSTfX+iS1fGGDLOqQwHAkha4Z0k8TojMFKx9EQPkoM2Awt/ysWW7eI2NDi72+nIW/ydImMeoVT1eEeElHPK8vVNcRX5ArLeoc3YMq7zzluG/dzbTBX69LkcS/31IdtbEkzIsddRtlJ+pze+mt+xN52oFr3ViFFq8Rhr/HysZBd//aTMVnis7OJO0ggZEQeQT8GqbNWhak6BBDFH8OuWeEdLR16Yn4IrHlLF22z+IFSSwKuTA97+NbchGGSQLjCeCyVFSzWgUPByTPDxYUkNvhAmNiZWsoJHm7hbyDBNJiNfSTPP6x54WIc7wGQajbBQX1RCs6F4uoyT/l3pIkyzI6SHquAnJmWZ9b0U46uFf6mMsYiWUih7lii9RzME0M==auM7"), file = TRUE, algo="md5")
conn <- DBI::dbConnect(odbc::odbc(), "GW2DB")
conn@info$dbms.name
# library(magick)
# library(jsonlite)
# library(sodium)
# magick::image_read("book-305126_1280.png") %>% serialize(connection = NULL) %>% base64enc::base64encode() %>% writeClipboard()
sapply(dir("R", full.names = TRUE), source)
library(purrr);
library(stringi);
library(parallelly);
library(future);
library(foreach);
library(data.table)
# library(book.of.workflow)
#
# ~ do.copy_obj() ====
BLAH <- new.env()
BLEH <- new.env()
set_names(letters[1:10], LETTERS[1:10]) |> as.list() |> list2env(envir = globalenv())
set_names(letters[11:20], LETTERS[11:20]) |> as.list() |> list2env(envir = BLEH)
.pattern <- "^[A-Z]$"
do.copy_obj(A, keep.orig = TRUE, .debug = !TRUE);
ls(pattern = .pattern)
# [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
do.copy_obj(B, C, D, keep.orig = TRUE, .debug = !TRUE);
ls(pattern = .pattern)
# [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
do.copy_obj(B, C, D, to.env = BLAH, keep.orig = TRUE, .debug = !TRUE);
ls(BLAH, pattern = .pattern)
# [1] "B" "C" "D"
do.copy_obj(B, C, D, from.env = BLAH, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
ls(BLEH, pattern = .pattern)
# [1] "B" "C" "D" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(E, `F`, G, to.env = BLEH, keep.orig = TRUE, .debug = !TRUE);
purrr::map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "B" "C" "D"
#
# $BLEH
# [1] "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(A, B, C, D, E, `F`, G, to.env = c(BLEH, BLAH), keep.orig = TRUE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
do.copy_obj(!!!LETTERS[1:7], to.env = c(BLEH, BLAH), keep.orig = FALSE, .debug = !TRUE);
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = .pattern, envir = eval(as.symbol(.x))));
# $BLAH
# [1] "A" "B" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
do.copy_obj(`BLAH$alpha` = H, `BLAH$beta` = I, `BLEH$gamma` = J, keep.orig = TRUE, .debug = !TRUE);
.pattern <- "^[A-Z]$|(alpha|beta|gamma)"
map(purrr::set_names(c("BLAH", "BLEH", ".GlobalEnv")), ~ls(pattern = paste0(.pattern, "|(^a-z)"), envir = eval(as.symbol(.x))));
# BLAH
# [1] "A" "alpha" "B" "beta" "C" "D" "E" "F" "G"
#
# $BLEH
# [1] "A" "B" "C" "D" "E" "F" "G" "gamma" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
#
# $.GlobalEnv
# [1] "H" "I" "J"
# ~ read.snippet(), make.snippet() ====
make.snippet(keyword, another, use.clipboard = TRUE)
make.snippet(keyword, another, include.read = TRUE, use.clipboard = FALSE)
# <snippet: keyword another> ----
read.snippet(keyword, another, action = parse);
# </snippet>
# undebug(read.snippet)
# <snippet: keyword another> ----
read.snippet(keyword, another, action = exec);
# </snippet>
read.snippet(keyword, another, action = save);
# </snippet>
# undebug(read.snippet)
# <snippet: keyword another2> ----
read.snippet(keyword, another2, action = exec);
# <snippet: keyword another> ----
read.snippet(keyword, another, action = parse);
# </snippet>
read.snippet(key, ano, 2, action = save);
# ~ do.save.image():: Only check the prompt to ensure the expected objects and environment return ====
# debug(do.save_image)
do.save_image();
library(book.of.workflow)
pkgdown::build_site()
pkgdown::build_site()
library(book.of.workflow)
library(book.of.workflow)
library(book.of.workflow)
library(book.of.workflow)
pkgdown::build_site()
library(book.of.workflow)
